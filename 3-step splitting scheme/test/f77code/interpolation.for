      implicit real*8 (a-h,o-z)
      character*8 rt_cont
      common /aa/ ia(200000000)

ccccccccccccccccccccccccc  
      open(1,file='dimension',form='formatted')
      read(1,*) dim
      close(1)

      numtyp=1
      rt_cont='q9'
      if(dim.eq.3) rt_cont='c27'
ccccccccccccccccccccccccc
      if(rt_cont.eq.'q4'.or.rt_cont.eq.'q4') iqtcw=1
      if(rt_cont.eq.'t3'.or.rt_cont.eq.'t3') iqtcw=2
      if(rt_cont.eq.'c8'.or.rt_cont.eq.'c8') iqtcw=3
      if(rt_cont.eq.'w4'.or.rt_cont.eq.'w4') iqtcw=4
      if(rt_cont.eq.'w6'.or.rt_cont.eq.'w6') iqtcw=5
      if(rt_cont.eq.'q9'.or.rt_cont.eq.'q9') iqtcw=6
      if(rt_cont.eq.'t6'.or.rt_cont.eq.'t6') iqtcw=7
      if(rt_cont.eq.'c27'.or.rt_cont.eq.'c27') iqtcw=8
      if(rt_cont.eq.'w10'.or.rt_cont.eq.'w10') iqtcw=9
      if(rt_cont.eq.'l2'.or.rt_cont.eq.'l2') iqtcw=10
      if(rt_cont.eq.'l3'.or.rt_cont.eq.'l3') iqtcw=11

c.....open coor1 for solid coodinates
      open (2,file='coor1',form='unformatted',status='old')
      read(2) nf,nd
      rewind(2)
 
c.....open coor0 for fluid coodinates
      open (1,file='coor0',form='unformatted',status='old')
      read(1) nc,nd
      rewind(1)
 
c.......open elem0 for the fluid elements
      open (3,file='elem0',form='unformatted',status='old')
      read (3) num,nnode
      rewind(3)
	  
      nne=nnode-1

      kna1=nd*nc*2
      kna2=nd*nf*2
      kna3=nne*nf*2	
      kna4=nnode*num*1
      if (kna4/2*2 .lt. kna4) kna4=kna4+1
      kna5=nf*1
      if (kna5/2*2 .lt. kna5) kna5=kna5+1
      kna6=nf*1
      if (kna6/2*2 .lt. kna6) kna6=kna6+1
      kna7=nd*nne*2	
      kna8=nd*nd*2	  
      kna9=nd*nd*2

      kna0=1
      kna1=kna1+kna0
      kna2=kna2+kna1
      kna3=kna3+kna2
      kna4=kna4+kna3
      kna5=kna5+kna4
      kna6=kna6+kna5
      kna7=kna7+kna6
      kna8=kna8+kna7
      kna9=kna9+kna8
      if (kna9-1.gt.200000000) then
      write(*,*) 'exceed memory of array ia'
      write(*,*) 'memory of ia = 200000000'
      write(*,*) 'memory needed = ',kna9,' in prgram jddd'
      stop 55555
      endif
      call jddd(nc,nf,iqtcw,nd,numtyp,nnode,num,nne,
     *ia(kna0),ia(kna1),ia(kna2),ia(kna3),ia(kna4),
     *ia(kna5),ia(kna6),ia(kna7),ia(kna8))
      end
      subroutine jddd(nc,nf,iqtcw,nd,numtyp,nnode,num,nne,
     *xc,xf,dd,nod,inde,
     *infb,points,cr,rc)
      implicit real*8 (a-h,o-z)
      dimension xc(nd,nc),xf(nd,nf),rc(nd,nd),cr(nd,nd),
     & points(nd,nne),dd(nne,nf),
     & nod(nnode,num),inde(nf),infb(nf),r(3)
 
      read (1) nc,nd,((xc(k,i),k=1,nd),i=1,nc)
      close(1)
 
      read (2) nf,nd,((xf(k,i),k=1,nd),i=1,nf)
      close(2)

c.....read elements of fluid mesh
      read (3) num,nnode,
     *    ((nod(j,i),j=1,nnode),i=1,num)
      close (3)
 
c      write(*,*) '.....start to compute jd and dd matrix ....'
      call getdd(iqtcw,nfb,nnode,num,
     & nd,nc,nf,nne,xc,xf,nod,points,infb,inde,dd,
     & rc, cr)
c      write(*,*) '..... jd computing finished .....'
 

c.......open project file to store jd & dd matrix .....
      open (4,file='project',form='unformatted',status='unknown')
c      open (5,file='project.txt',form='formatted',status='unknown')
       write(4) numtyp,nne,nfb,nne,nf
       write(4) (infb(j),j=1,nfb),
     &          ((nod(i,inde(j)),i=1,nne),j=1,nfb),
     &          ((dd(i,j),i=1,nne),j=1,nfb)
	 
c       write(5,*) numtyp,nnode,nfb,nnode,nf
c       do j=1,nfb
c       write(5,'(1x,i5,1x,10i6)') infb(j),(nod(i,inde(j)),i=1,nnode)
c       write(5,'(1x,9f8.3)') (dd(i,j),i=1,nnode)
c       write(5,'(1x,i5,1x,10i6)') (nod(i,inde(j)),i=1,nnode)
c       enddo	 
	 
      close(4)
c      close(5)
	  
       return
       end
 
      subroutine getdd(iqtcw,nfn,nnode,num,
     & nd,nc,nf,nne,xc,xf,nod,points,infb,inde,dd,
     & rc, cr)
      implicit real*8 (a-h,o-z)
      dimension xc(nd,nc),nod(nnode,num),inde(nf),dd(nne,nf),
     * xf(nd,nf),points(nd,nne),p(3),r(3),infb(nf),
     * rc(nd,nd),cr(nd,nd)
c.... i denotes the solid node NO.
      nfn=0
      do i=1,nf
      infb(i)=0
      enddo
      do 2111  i=1,nf
      inde(i)=0
      do k=1,nd
      r(k)=xf(k,i)
      enddo
c .... j denotes the fluid element NO.
      do 2110 j=1,num
      do k=1,nd
      do l=1,nne
      iel=nod(l,j)
      points(k,l)=xc(k,iel)
      enddo
      enddo
c...... inn = 1 means r sits in the fluid element cube
      inn=nin(nd,nne,r,points)
      if(inn.ne.1) goto 2110
 
      call calculp(iqtcw,nne,nd,points,r,p,rc,cr)
      e = 1.0d-8
      m = 1
      do k=1,nd
      if (p(k).lt.-1.0-e .or. p(k).gt.1.0+e) m = 0
      enddo
      if (iqtcw.eq.2 .or. iqtcw.eq.5 .or. iqtcw.eq.7) then
      if (p(1).lt.-e .or. p(2).lt.-e .or. p(1)+p(2).gt.1.0+e) m = 0
      endif
      if (iqtcw.eq.4 .or. iqtcw.eq.9) then
      if (p(1).lt.-e .or. p(2).lt.-e .or. p(3).lt.-e .or.
     & p(1)+p(2)+p(3).gt.1.0+e) m = 0
      endif
      if (m.eq.0) goto 2110
      nfn=nfn+1
      infb(nfn)=i
      inde(nfn)=j
      call fqtcw(iqtcw,p,dd(1,nfn))
      goto 2111
2110  continue
2111  continue
      return
      end
 
      integer function nin(nd,np,po,p)
      implicit real*8 (a-h,o-z)
      dimension po(nd),p(nd,np),xmin(3),xmax(3)
c...... calculate fine node po is in the coarse element cube or not
c .....  nin=1 if po in the element cube
      do k=1,nd
      xmax(k)=p(k,1)
      xmin(k)=p(k,1)
      do i=2,np
      if (p(k,i).gt.xmax(k)) xmax(k)=p(k,i)
      if (p(k,i).lt.xmin(k)) xmin(k)=p(k,i)
      enddo
      enddo
      do k=1,nd
      e = (xmax(k)-xmin(k))*1.d-8
      xmax(k)=xmax(k)+e
      xmin(k)=xmin(k)-e
      enddo
      nin=1
      do k=1,nd
      if (po(k).lt.xmin(k) .or. po(k).gt.xmax(k)) nin=0
      enddo
      return
      end
 
      subroutine calculp(iqtcw,nnode,nd,rnod,r0,p,rc,cr)
      implicit real*8 (a-h,o-z)
      dimension rnod(nd,nnode),r0(nd),p(nd),rc(nd,nd),
     &          cr(nd,nd),r(3),dr(3),dp(3)
c .......................................................... c
c .... calculate p by r0 using newton iteration
c .... f(p) = r(p) - r0
c .... f(p+dp) = f(p) + f'(p)*dp = r(p)-r0 + {r/p}*dp = 0
c .... dp = - {p/r}*(r(p)-r0)
c .... p+dp = p - {p/r}*(r(p)-r0)
c .... p+dp = p - cr*( r(p) - r0 )
c .......................................................... c
 
      errmax = 1.d-6/nnode
      itmax = 10
      it = 0
c ..... calculate r rc & cr by p & rnod
c ..... p denote the reference coordinates
c ..... r denote the coordinates
c ..... rnod denote the nodal points of the coarse element
c ..... rc denote the jacobi matrix
c ..... cr denote the inverse matrix of jacobi
      do 100 i=1,nd
      p(i) = 0.0d0
100   continue
1     continue
      call rccr(iqtcw,nnode,nd,nd,p,r,rnod,rc,cr,det)
      do 200 i=1,nd
      dr(i) = r(i) - r0(i)
200	  continue
      err = 0.0d0
      do 400 i=1,nd
      dp(i) = 0.0d0
      do 401 j=1,nd
      dp(i) = dp(i) + cr(i,j)*dr(j)
401	  continue
      p(i) = p(i) - dp(i)
      err = err + dp(i)*dp(i)
400	  continue
      it = it+1
c        write(*,*) 'err =',err
c        write(*,*) 'dp =',(dp(i),i=1,nd)
c        write(*,*) 'p =',(p(i),i=1,nd)
      if (err.gt.errmax .and. it.lt.itmax) goto 1
c        write(*,*) 'p = ',p
      return
      end
 
      subroutine rccr(iqtcw,nnode,nrefc,ncoor,refc,coor,coorr,rc,cr,
     *                det)
      implicit real*8 (a-h,o-z)
      dimension refc(nrefc),rc(ncoor,nrefc),cr(nrefc,ncoor),a(5,10),
     *          coorr(ncoor,nnode),coor(ncoor)
      goto (1,2,3,4,5,6,7,8,9,10,11), iqtcw
1     call tq4(refc,coor,coorr,rc)
      goto 1111
2     call tt3(refc,coor,coorr,rc)
      goto 1111
3     call tc8(refc,coor,coorr,rc)
      goto 1111
4     call tw4(refc,coor,coorr,rc)
      goto 1111
5     call tw6(refc,coor,coorr,rc)
      goto 1111
6     call tq9(refc,coor,coorr,rc)
      goto 1111
7     call tt6(refc,coor,coorr,rc)
      goto 1111
8     call tc27(refc,coor,coorr,rc)
      goto 1111
9     call tw10(refc,coor,coorr,rc)
      goto 1111
10    call tl2(refc,coor,coorr,rc)
      goto 1111
11    call tl3(refc,coor,coorr,rc)
1111  continue
      n=nrefc
      m=n*2
      det = 1.0
      do 15 i=1,n
      do 15 j=1,n
      if (i.le.ncoor) a(i,j) = rc(i,j)
      if (i.gt.ncoor) a(i,j)=1.0
      a(i,n+j)=0.0
      if (i.eq.j) a(i,n+i) = 1.0
15    continue
c     write(*,*) 'a ='
c     do 21 i=1,n
c21   write(*,8) (a(i,j),j=1,m)
      do 400 i=1,n
      amax = 0.0
      l = 0
      do 50 j=i,n
      c = a(j,i)
      if (c.lt.0) c = -c
      if (c.le.amax) goto 50
      amax = c
      l = j
50    continue
      do 60 k=1,m
      c = a(l,k)
      a(l,k) = a(i,k)
      a(i,k) = c
60    continue
      c = a(i,i)
      det = c*det
      do 100 k=i+1,m
100   a(i,k) = a(i,k)/c
      do 300 j=1,n
      if (i.eq.j) goto 300
      do 200 k=i+1,m
200   a(j,k) = a(j,k)-a(i,k)*a(j,i)
c     write(*,*) 'i =',i,'  j =',j,'  a ='
c     do 11 ii=1,n
c11   write(*,8) (a(ii,jj),jj=1,m)
300   continue
400   continue
      do 500 i=1,nrefc
      do 500 j=1,ncoor
500   cr(i,j) = a(i,n+j)
c     write(*,*) 'a ='
c     do 22 i=1,n
c22   write(*,8) (a(i,j),j=1,m)
c     write(*,*) 'rc ='
c     do 24 i=1,ncoor
c24   write(*,8) (rc(i,j),j=1,nrefc)
c     write(*,*) 'cr ='
c     do 23 i=1,nrefc
c23   write(*,8) (cr(i,j),j=1,ncoor)
c     write(*,*) 'det =',det
      if (det.lt.0.0) det=-det
c     write(*,*) 'det =',det
c8     format(1x,6f12.3)
      return
      end
         
      subroutine tq4(refc,coor,coorr,rc)
      implicit real*8 (a-h,o-z)
      dimension x(4),y(4),refc(2),coor(2),coorr(2,4),rc(2,2)
      rx=refc(1)
      ry=refc(2)
      do 1 n=1,4
      x(n)=coorr(1,n)
      y(n)=coorr(2,n)
1     continue
      coor(1)=+(+(+1.-rx)/2.*(+1.-ry)/2.)*x(1)+(+(+1.+rx)/
     /2.*(+1.-ry)/2.)*x(2)+(+(+1.+rx)/2.*(+1.+ry)/2.)*x(3)+(+
     /(+1.-rx)/2.*(+1.+ry)/2.)*x(4)
      coor(2)=+(+(+1.-rx)/2.*(+1.-ry)/2.)*y(1)+(+(+1.+rx)/
     /2.*(+1.-ry)/2.)*y(2)+(+(+1.+rx)/2.*(+1.+ry)/2.)*y(3)+(+
     /(+1.-rx)/2.*(+1.+ry)/2.)*y(4)
      rc(1,1)=+(+(-1.)/2.*(+1.-ry)/2.)*x(1)+(+(+1.)/2.*(+
     /1.-ry)/2.)*x(2)+(+(+1.)/2.*(+1.+ry)/2.)*x(3)+(+(-1.)/
     /2.*(+1.+ry)/2.)*x(4)
      rc(2,1)=+(+(-1.)/2.*(+1.-ry)/2.)*y(1)+(+(+1.)/2.*(+
     /1.-ry)/2.)*y(2)+(+(+1.)/2.*(+1.+ry)/2.)*y(3)+(+(-1.)/
     /2.*(+1.+ry)/2.)*y(4)
      rc(1,2)=+(+(+1.-rx)/2.*(-1.)/2.)*x(1)+(+(+1.+rx)/2.*
     /(-1.)/2.)*x(2)+(+(+1.+rx)/2.*(+1.)/2.)*x(3)+(+(+1.-rx)/
     /2.*(+1.)/2.)*x(4)
      rc(2,2)=+(+(+1.-rx)/2.*(-1.)/2.)*y(1)+(+(+1.+rx)/2.*
     /(-1.)/2.)*y(2)+(+(+1.+rx)/2.*(+1.)/2.)*y(3)+(+(+1.-rx)/
     /2.*(+1.)/2.)*y(4)
      return
      end

      subroutine tt3(refc,coor,coorr,rc)
      implicit real*8 (a-h,o-z)
      dimension x(3),y(3),refc(2),coor(2),coorr(2,3),rc(2,2)
      rx=refc(1)
      ry=refc(2)
      do 1 n=1,3
      x(n)=coorr(1,n)
      y(n)=coorr(2,n)
1     continue
      coor(1)=+(+rx)*x(1)+(+ry)*x(2)+(+(+1.-rx-ry))*x(3)
      coor(2)=+(+rx)*y(1)+(+ry)*y(2)+(+(+1.-rx-ry))*y(3)
      rc(1,1)=+(+1.)*x(1)+(+(-1.))*x(3)
      rc(2,1)=+(+1.)*y(1)+(+(-1.))*y(3)
      rc(1,2)=+(+1.)*x(2)+(+(-1.))*x(3)
      rc(2,2)=+(+1.)*y(2)+(+(-1.))*y(3)
      return
      end
         
      subroutine tc8(refc,coor,coorr,rc)
      implicit real*8 (a-h,o-z)
      dimension x(8),y(8),z(8),refc(3),coor(3),coorr(3,8),rc(3,3)
      rx=refc(1)
      ry=refc(2)
      rz=refc(3)
      do 1 n=1,8
      x(n)=coorr(1,n)
      y(n)=coorr(2,n)
      z(n)=coorr(3,n)
1     continue
      coor(1)=+(+(+1.-rx)/2.*(+1.-ry)/2.*(+1.-rz)/2.)*x(1)
     /+(+(+1.+rx)/2.*(+1.-ry)/2.*(+1.-rz)/2.)*x(2)+(+(+1.+
     /rx)/2.*(+1.+ry)/2.*(+1.-rz)/2.)*x(3)+(+(+1.-rx)/2.*(+
     /1.+ry)/2.*(+1.-rz)/2.)*x(4)+(+(+1.-rx)/2.*(+1.-ry)/2.*
     /(+1.+rz)/2.)*x(5)+(+(+1.+rx)/2.*(+1.-ry)/2.*(+1.+rz)/
     /2.)*x(6)+(+(+1.+rx)/2.*(+1.+ry)/2.*(+1.+rz)/2.)*x(7)+(+
     /(+1.-rx)/2.*(+1.+ry)/2.*(+1.+rz)/2.)*x(8)
      coor(2)=+(+(+1.-rx)/2.*(+1.-ry)/2.*(+1.-rz)/2.)*y(1)
     /+(+(+1.+rx)/2.*(+1.-ry)/2.*(+1.-rz)/2.)*y(2)+(+(+1.+
     /rx)/2.*(+1.+ry)/2.*(+1.-rz)/2.)*y(3)+(+(+1.-rx)/2.*(+
     /1.+ry)/2.*(+1.-rz)/2.)*y(4)+(+(+1.-rx)/2.*(+1.-ry)/2.*
     /(+1.+rz)/2.)*y(5)+(+(+1.+rx)/2.*(+1.-ry)/2.*(+1.+rz)/
     /2.)*y(6)+(+(+1.+rx)/2.*(+1.+ry)/2.*(+1.+rz)/2.)*y(7)+(+
     /(+1.-rx)/2.*(+1.+ry)/2.*(+1.+rz)/2.)*y(8)
      coor(3)=+(+(+1.-rx)/2.*(+1.-ry)/2.*(+1.-rz)/2.)*z(1)
     /+(+(+1.+rx)/2.*(+1.-ry)/2.*(+1.-rz)/2.)*z(2)+(+(+1.+
     /rx)/2.*(+1.+ry)/2.*(+1.-rz)/2.)*z(3)+(+(+1.-rx)/2.*(+
     /1.+ry)/2.*(+1.-rz)/2.)*z(4)+(+(+1.-rx)/2.*(+1.-ry)/2.*
     /(+1.+rz)/2.)*z(5)+(+(+1.+rx)/2.*(+1.-ry)/2.*(+1.+rz)/
     /2.)*z(6)+(+(+1.+rx)/2.*(+1.+ry)/2.*(+1.+rz)/2.)*z(7)+(+
     /(+1.-rx)/2.*(+1.+ry)/2.*(+1.+rz)/2.)*z(8)
      rc(1,1)=+(+(-1.)/2.*(+1.-ry)/2.*(+1.-rz)/2.)*x(1)+(+
     /(+1.)/2.*(+1.-ry)/2.*(+1.-rz)/2.)*x(2)+(+(+1.)/2.*(+
     /1.+ry)/2.*(+1.-rz)/2.)*x(3)+(+(-1.)/2.*(+1.+ry)/2.*(+
     /1.-rz)/2.)*x(4)+(+(-1.)/2.*(+1.-ry)/2.*(+1.+rz)/2.)*x(5)
     /+(+(+1.)/2.*(+1.-ry)/2.*(+1.+rz)/2.)*x(6)+(+(+1.)/2.*
     /(+1.+ry)/2.*(+1.+rz)/2.)*x(7)+(+(-1.)/2.*(+1.+ry)/2.*
     /(+1.+rz)/2.)*x(8)
      rc(2,1)=+(+(-1.)/2.*(+1.-ry)/2.*(+1.-rz)/2.)*y(1)+(+
     /(+1.)/2.*(+1.-ry)/2.*(+1.-rz)/2.)*y(2)+(+(+1.)/2.*(+
     /1.+ry)/2.*(+1.-rz)/2.)*y(3)+(+(-1.)/2.*(+1.+ry)/2.*(+
     /1.-rz)/2.)*y(4)+(+(-1.)/2.*(+1.-ry)/2.*(+1.+rz)/2.)*y(5)
     /+(+(+1.)/2.*(+1.-ry)/2.*(+1.+rz)/2.)*y(6)+(+(+1.)/2.*
     /(+1.+ry)/2.*(+1.+rz)/2.)*y(7)+(+(-1.)/2.*(+1.+ry)/2.*
     /(+1.+rz)/2.)*y(8)
      rc(3,1)=+(+(-1.)/2.*(+1.-ry)/2.*(+1.-rz)/2.)*z(1)+(+
     /(+1.)/2.*(+1.-ry)/2.*(+1.-rz)/2.)*z(2)+(+(+1.)/2.*(+
     /1.+ry)/2.*(+1.-rz)/2.)*z(3)+(+(-1.)/2.*(+1.+ry)/2.*(+
     /1.-rz)/2.)*z(4)+(+(-1.)/2.*(+1.-ry)/2.*(+1.+rz)/2.)*z(5)
     /+(+(+1.)/2.*(+1.-ry)/2.*(+1.+rz)/2.)*z(6)+(+(+1.)/2.*
     /(+1.+ry)/2.*(+1.+rz)/2.)*z(7)+(+(-1.)/2.*(+1.+ry)/2.*
     /(+1.+rz)/2.)*z(8)
      rc(1,2)=+(+(+1.-rx)/2.*(-1.)/2.*(+1.-rz)/2.)*x(1)+(+
     /(+1.+rx)/2.*(-1.)/2.*(+1.-rz)/2.)*x(2)+(+(+1.+rx)/2.*
     /(+1.)/2.*(+1.-rz)/2.)*x(3)+(+(+1.-rx)/2.*(+1.)/2.*(+
     /1.-rz)/2.)*x(4)+(+(+1.-rx)/2.*(-1.)/2.*(+1.+rz)/2.)*x(5)
     /+(+(+1.+rx)/2.*(-1.)/2.*(+1.+rz)/2.)*x(6)+(+(+1.+rx)/
     /2.*(+1.)/2.*(+1.+rz)/2.)*x(7)+(+(+1.-rx)/2.*(+1.)/2.*
     /(+1.+rz)/2.)*x(8)
      rc(2,2)=+(+(+1.-rx)/2.*(-1.)/2.*(+1.-rz)/2.)*y(1)+(+
     /(+1.+rx)/2.*(-1.)/2.*(+1.-rz)/2.)*y(2)+(+(+1.+rx)/2.*
     /(+1.)/2.*(+1.-rz)/2.)*y(3)+(+(+1.-rx)/2.*(+1.)/2.*(+
     /1.-rz)/2.)*y(4)+(+(+1.-rx)/2.*(-1.)/2.*(+1.+rz)/2.)*y(5)
     /+(+(+1.+rx)/2.*(-1.)/2.*(+1.+rz)/2.)*y(6)+(+(+1.+rx)/
     /2.*(+1.)/2.*(+1.+rz)/2.)*y(7)+(+(+1.-rx)/2.*(+1.)/2.*
     /(+1.+rz)/2.)*y(8)
      rc(3,2)=+(+(+1.-rx)/2.*(-1.)/2.*(+1.-rz)/2.)*z(1)+(+
     /(+1.+rx)/2.*(-1.)/2.*(+1.-rz)/2.)*z(2)+(+(+1.+rx)/2.*
     /(+1.)/2.*(+1.-rz)/2.)*z(3)+(+(+1.-rx)/2.*(+1.)/2.*(+
     /1.-rz)/2.)*z(4)+(+(+1.-rx)/2.*(-1.)/2.*(+1.+rz)/2.)*z(5)
     /+(+(+1.+rx)/2.*(-1.)/2.*(+1.+rz)/2.)*z(6)+(+(+1.+rx)/
     /2.*(+1.)/2.*(+1.+rz)/2.)*z(7)+(+(+1.-rx)/2.*(+1.)/2.*
     /(+1.+rz)/2.)*z(8)
      rc(1,3)=+(+(+1.-rx)/2.*(+1.-ry)/2.*(-1.)/2.)*x(1)+(+
     /(+1.+rx)/2.*(+1.-ry)/2.*(-1.)/2.)*x(2)+(+(+1.+rx)/2.*
     /(+1.+ry)/2.*(-1.)/2.)*x(3)+(+(+1.-rx)/2.*(+1.+ry)/2.*
     /(-1.)/2.)*x(4)+(+(+1.-rx)/2.*(+1.-ry)/2.*(+1.)/2.)*x(5)
     /+(+(+1.+rx)/2.*(+1.-ry)/2.*(+1.)/2.)*x(6)+(+(+1.+rx)/
     /2.*(+1.+ry)/2.*(+1.)/2.)*x(7)+(+(+1.-rx)/2.*(+1.+ry)/
     /2.*(+1.)/2.)*x(8)
      rc(2,3)=+(+(+1.-rx)/2.*(+1.-ry)/2.*(-1.)/2.)*y(1)+(+
     /(+1.+rx)/2.*(+1.-ry)/2.*(-1.)/2.)*y(2)+(+(+1.+rx)/2.*
     /(+1.+ry)/2.*(-1.)/2.)*y(3)+(+(+1.-rx)/2.*(+1.+ry)/2.*
     /(-1.)/2.)*y(4)+(+(+1.-rx)/2.*(+1.-ry)/2.*(+1.)/2.)*y(5)
     /+(+(+1.+rx)/2.*(+1.-ry)/2.*(+1.)/2.)*y(6)+(+(+1.+rx)/
     /2.*(+1.+ry)/2.*(+1.)/2.)*y(7)+(+(+1.-rx)/2.*(+1.+ry)/
     /2.*(+1.)/2.)*y(8)
      rc(3,3)=+(+(+1.-rx)/2.*(+1.-ry)/2.*(-1.)/2.)*z(1)+(+
     /(+1.+rx)/2.*(+1.-ry)/2.*(-1.)/2.)*z(2)+(+(+1.+rx)/2.*
     /(+1.+ry)/2.*(-1.)/2.)*z(3)+(+(+1.-rx)/2.*(+1.+ry)/2.*
     /(-1.)/2.)*z(4)+(+(+1.-rx)/2.*(+1.-ry)/2.*(+1.)/2.)*z(5)
     /+(+(+1.+rx)/2.*(+1.-ry)/2.*(+1.)/2.)*z(6)+(+(+1.+rx)/
     /2.*(+1.+ry)/2.*(+1.)/2.)*z(7)+(+(+1.-rx)/2.*(+1.+ry)/
     /2.*(+1.)/2.)*z(8)
      return
      end
         
      subroutine tw4(refc,coor,coorr,rc)
      implicit real*8 (a-h,o-z)
      dimension x(4),y(4),z(4),refc(3),coor(3),coorr(3,4),rc(3,3)
      rx=refc(1)
      ry=refc(2)
      rz=refc(3)
      do 1 n=1,4
      x(n)=coorr(1,n)
      y(n)=coorr(2,n)
      z(n)=coorr(3,n)
1     continue
      coor(1)=+(+rx)*x(1)+(+ry)*x(2)+(+rz)*x(3)+(+(+1.-rx-
     /ry-rz))*x(4)
      coor(2)=+(+rx)*y(1)+(+ry)*y(2)+(+rz)*y(3)+(+(+1.-rx-
     /ry-rz))*y(4)
      coor(3)=+(+rx)*z(1)+(+ry)*z(2)+(+rz)*z(3)+(+(+1.-rx-
     /ry-rz))*z(4)
      rc(1,1)=+(+1.)*x(1)+(+(-1.))*x(4)
      rc(2,1)=+(+1.)*y(1)+(+(-1.))*y(4)
      rc(3,1)=+(+1.)*z(1)+(+(-1.))*z(4)
      rc(1,2)=+(+1.)*x(2)+(+(-1.))*x(4)
      rc(2,2)=+(+1.)*y(2)+(+(-1.))*y(4)
      rc(3,2)=+(+1.)*z(2)+(+(-1.))*z(4)
      rc(1,3)=+(+1.)*x(3)+(+(-1.))*x(4)
      rc(2,3)=+(+1.)*y(3)+(+(-1.))*y(4)
      rc(3,3)=+(+1.)*z(3)+(+(-1.))*z(4)
      return
      end
         
      subroutine tw6(refc,coor,coorr,rc)
      implicit real*8 (a-h,o-z)
      dimension x(6),y(6),z(6),refc(3),coor(3),coorr(3,6),rc(3,3)
      rx=refc(1)
      ry=refc(2)
      rz=refc(3)
      do 1 n=1,6
      x(n)=coorr(1,n)
      y(n)=coorr(2,n)
      z(n)=coorr(3,n)
1     continue
      coor(1)=+(+rx*(+1.-rz)/2.)*x(1)+(+ry*(+1.-rz)/2.)*x(2)
     /+(+(+1.-rx-ry)*(+1.-rz)/2.)*x(3)+(+rx*(+1.+rz)/2.)*x(4)
     /+(+ry*(+1.+rz)/2.)*x(5)+(+(+1.-rx-ry)*(+1.+rz)/2.)*x(6)
      coor(2)=+(+rx*(+1.-rz)/2.)*y(1)+(+ry*(+1.-rz)/2.)*y(2)
     /+(+(+1.-rx-ry)*(+1.-rz)/2.)*y(3)+(+rx*(+1.+rz)/2.)*y(4)
     /+(+ry*(+1.+rz)/2.)*y(5)+(+(+1.-rx-ry)*(+1.+rz)/2.)*y(6)
      coor(3)=+(+rx*(+1.-rz)/2.)*z(1)+(+ry*(+1.-rz)/2.)*z(2)
     /+(+(+1.-rx-ry)*(+1.-rz)/2.)*z(3)+(+rx*(+1.+rz)/2.)*z(4)
     /+(+ry*(+1.+rz)/2.)*z(5)+(+(+1.-rx-ry)*(+1.+rz)/2.)*z(6)
      rc(1,1)=+(+(+1.-rz)/2.)*x(1)+(+(-1.)*(+1.-rz)/2.)*x(3)
     /+(+(+1.+rz)/2.)*x(4)+(+(-1.)*(+1.+rz)/2.)*x(6)
      rc(2,1)=+(+(+1.-rz)/2.)*y(1)+(+(-1.)*(+1.-rz)/2.)*y(3)
     /+(+(+1.+rz)/2.)*y(4)+(+(-1.)*(+1.+rz)/2.)*y(6)
      rc(3,1)=+(+(+1.-rz)/2.)*z(1)+(+(-1.)*(+1.-rz)/2.)*z(3)
     /+(+(+1.+rz)/2.)*z(4)+(+(-1.)*(+1.+rz)/2.)*z(6)
      rc(1,2)=+(+(+1.-rz)/2.)*x(2)+(+(-1.)*(+1.-rz)/2.)*x(3)
     /+(+(+1.+rz)/2.)*x(5)+(+(-1.)*(+1.+rz)/2.)*x(6)
      rc(2,2)=+(+(+1.-rz)/2.)*y(2)+(+(-1.)*(+1.-rz)/2.)*y(3)
     /+(+(+1.+rz)/2.)*y(5)+(+(-1.)*(+1.+rz)/2.)*y(6)
      rc(3,2)=+(+(+1.-rz)/2.)*z(2)+(+(-1.)*(+1.-rz)/2.)*z(3)
     /+(+(+1.+rz)/2.)*z(5)+(+(-1.)*(+1.+rz)/2.)*z(6)
      rc(1,3)=+(+rx*(-1.)/2.)*x(1)+(+ry*(-1.)/2.)*x(2)+(+
     /(+1.-rx-ry)*(-1.)/2.)*x(3)+(+rx*(+1.)/2.)*x(4)+(+ry*(+
     /1.)/2.)*x(5)+(+(+1.-rx-ry)*(+1.)/2.)*x(6)
      rc(2,3)=+(+rx*(-1.)/2.)*y(1)+(+ry*(-1.)/2.)*y(2)+(+
     /(+1.-rx-ry)*(-1.)/2.)*y(3)+(+rx*(+1.)/2.)*y(4)+(+ry*(+
     /1.)/2.)*y(5)+(+(+1.-rx-ry)*(+1.)/2.)*y(6)
      rc(3,3)=+(+rx*(-1.)/2.)*z(1)+(+ry*(-1.)/2.)*z(2)+(+
     /(+1.-rx-ry)*(-1.)/2.)*z(3)+(+rx*(+1.)/2.)*z(4)+(+ry*(+
     /1.)/2.)*z(5)+(+(+1.-rx-ry)*(+1.)/2.)*z(6)
      return
      end

      subroutine tw10(refc,coor,coorr,rc)
      implicit real*8 (a-h,o-z)
      dimension x(10),y(10),z(10),refc(3),coor(3),coorr(3,10),rc(3,3)
      rx=refc(1)
      ry=refc(2)
      rz=refc(3)
      do 1 n=1,10
      x(n)=coorr(1,n)
      y(n)=coorr(2,n)
      z(n)=coorr(3,n)
1     continue
      coor(1)=+(+rx*(+2.*rx-1.))*x(1)+(+rx*ry*4.)*x(5)+(+
     /ry*(+2.*ry-1.))*x(2)+(+ry*rz*4.)*x(6)+(+rz*(+2.*rz-1.))*x(3)
     /+(+rx*rz*4.)*x(7)+(+rx*(+1.-rx-ry-rz)*4.)*x(8)+(+ry*(+
     /1.-rx-ry-rz)*4.)*x(9)+(+rz*(+1.-rx-ry-rz)*4.)*x(10)+(+
     /(+1.-2.*rx-2.*ry-2.*rz)*(+1.-rx-ry-rz))*x(4)
      coor(2)=+(+rx*(+2.*rx-1.))*y(1)+(+rx*ry*4.)*y(5)+(+
     /ry*(+2.*ry-1.))*y(2)+(+ry*rz*4.)*y(6)+(+rz*(+2.*rz-1.))*y(3)
     /+(+rx*rz*4.)*y(7)+(+rx*(+1.-rx-ry-rz)*4.)*y(8)+(+ry*(+
     /1.-rx-ry-rz)*4.)*y(9)+(+rz*(+1.-rx-ry-rz)*4.)*y(10)+(+
     /(+1.-2.*rx-2.*ry-2.*rz)*(+1.-rx-ry-rz))*y(4)
      coor(3)=+(+rx*(+2.*rx-1.))*z(1)+(+rx*ry*4.)*z(5)+(+
     /ry*(+2.*ry-1.))*z(2)+(+ry*rz*4.)*z(6)+(+rz*(+2.*rz-1.))*z(3)
     /+(+rx*rz*4.)*z(7)+(+rx*(+1.-rx-ry-rz)*4.)*z(8)+(+ry*(+
     /1.-rx-ry-rz)*4.)*z(9)+(+rz*(+1.-rx-ry-rz)*4.)*z(10)+(+
     /(+1.-2.*rx-2.*ry-2.*rz)*(+1.-rx-ry-rz))*z(4)
      rc(1,1)=+(+(+2.*rx-1.)+rx*(+2.))*x(1)+(+ry*4.)*x(5)
     /+(+rz*4.)*x(7)+(+(+1.-rx-ry-rz)*4.+rx*(-1.)*4.)*x(8)+(+
     /ry*(-1.)*4.)*x(9)+(+rz*(-1.)*4.)*x(10)+(+(-2.)*(+1.-rx-
     /ry-rz)+(+1.-2.*rx-2.*ry-2.*rz)*(-1.))*x(4)
      rc(2,1)=+(+(+2.*rx-1.)+rx*(+2.))*y(1)+(+ry*4.)*y(5)
     /+(+rz*4.)*y(7)+(+(+1.-rx-ry-rz)*4.+rx*(-1.)*4.)*y(8)+(+
     /ry*(-1.)*4.)*y(9)+(+rz*(-1.)*4.)*y(10)+(+(-2.)*(+1.-rx-
     /ry-rz)+(+1.-2.*rx-2.*ry-2.*rz)*(-1.))*y(4)
      rc(3,1)=+(+(+2.*rx-1.)+rx*(+2.))*z(1)+(+ry*4.)*z(5)
     /+(+rz*4.)*z(7)+(+(+1.-rx-ry-rz)*4.+rx*(-1.)*4.)*z(8)+(+
     /ry*(-1.)*4.)*z(9)+(+rz*(-1.)*4.)*z(10)+(+(-2.)*(+1.-rx-
     /ry-rz)+(+1.-2.*rx-2.*ry-2.*rz)*(-1.))*z(4)
      rc(1,2)=+(+rx*4.)*x(5)+(+(+2.*ry-1.)+ry*(+2.))*x(2)
     /+(+rz*4.)*x(6)+(+rx*(-1.)*4.)*x(8)+(+(+1.-rx-ry-rz)*4.+
     /ry*(-1.)*4.)*x(9)+(+rz*(-1.)*4.)*x(10)+(+(-2.)*(+1.-rx-
     /ry-rz)+(+1.-2.*rx-2.*ry-2.*rz)*(-1.))*x(4)
      rc(2,2)=+(+rx*4.)*y(5)+(+(+2.*ry-1.)+ry*(+2.))*y(2)
     /+(+rz*4.)*y(6)+(+rx*(-1.)*4.)*y(8)+(+(+1.-rx-ry-rz)*4.+
     /ry*(-1.)*4.)*y(9)+(+rz*(-1.)*4.)*y(10)+(+(-2.)*(+1.-rx-
     /ry-rz)+(+1.-2.*rx-2.*ry-2.*rz)*(-1.))*y(4)
      rc(3,2)=+(+rx*4.)*z(5)+(+(+2.*ry-1.)+ry*(+2.))*z(2)
     /+(+rz*4.)*z(6)+(+rx*(-1.)*4.)*z(8)+(+(+1.-rx-ry-rz)*4.+
     /ry*(-1.)*4.)*z(9)+(+rz*(-1.)*4.)*z(10)+(+(-2.)*(+1.-rx-
     /ry-rz)+(+1.-2.*rx-2.*ry-2.*rz)*(-1.))*z(4)
      rc(1,3)=+(+ry*4.)*x(6)+(+(+2.*rz-1.)+rz*(+2.))*x(3)
     /+(+rx*4.)*x(7)+(+rx*(-1.)*4.)*x(8)+(+ry*(-1.)*4.)*x(9)
     /+(+(+1.-rx-ry-rz)*4.+rz*(-1.)*4.)*x(10)+(+(-2.)*(+1.-
     /rx-ry-rz)+(+1.-2.*rx-2.*ry-2.*rz)*(-1.))*x(4)
      rc(2,3)=+(+ry*4.)*y(6)+(+(+2.*rz-1.)+rz*(+2.))*y(3)
     /+(+rx*4.)*y(7)+(+rx*(-1.)*4.)*y(8)+(+ry*(-1.)*4.)*y(9)
     /+(+(+1.-rx-ry-rz)*4.+rz*(-1.)*4.)*y(10)+(+(-2.)*(+1.-
     /rx-ry-rz)+(+1.-2.*rx-2.*ry-2.*rz)*(-1.))*y(4)
      rc(3,3)=+(+ry*4.)*z(6)+(+(+2.*rz-1.)+rz*(+2.))*z(3)
     /+(+rx*4.)*z(7)+(+rx*(-1.)*4.)*z(8)+(+ry*(-1.)*4.)*z(9)
     /+(+(+1.-rx-ry-rz)*4.+rz*(-1.)*4.)*z(10)+(+(-2.)*(+1.-
     /rx-ry-rz)+(+1.-2.*rx-2.*ry-2.*rz)*(-1.))*z(4)
      return
      end

      subroutine tc27(refc,coor,coorr,rc)
      implicit real*8 (a-h,o-z)
      dimension x(27),y(27),z(27),refc(3),coor(3),coorr(3,27),rc(3,3)
      rx=refc(1)
      ry=refc(2)
      rz=refc(3)
      do 1 n=1,27
      x(n)=coorr(1,n)
      y(n)=coorr(2,n)
      z(n)=coorr(3,n)
1     continue
      coor(1)=+(+rx*(+rx-1.)/2.*ry*(+ry-1.)/2.*rz*(+rz-
     /1.)/2.)*x(1)+(+(+1.-rx**2)*ry*(+ry-1.)/2.*rz*(+rz-1.)/
     /2.)*x(9)+(+rx*(+1.+rx)/2.*ry*(+ry-1.)/2.*rz*(+rz-1.)/
     /2.)*x(2)+(+rx*(+rx-1.)/2.*(+1.-ry**2)*rz*(+rz-1.)/2.)*x(12)
     /+(+(+1.-rx**2)*(+1.-ry**2)*rz*(+rz-1.)/2.)*x(21)+(+rx*
     /(+1.+rx)/2.*(+1.-ry**2)*rz*(+rz-1.)/2.)*x(10)+(+rx*(+
     /rx-1.)/2.*ry*(+1.+ry)/2.*rz*(+rz-1.)/2.)*x(4)+(+(+1.-
     /rx**2)*ry*(+1.+ry)/2.*rz*(+rz-1.)/2.)*x(11)+(+rx*(+1.+
     /rx)/2.*ry*(+1.+ry)/2.*rz*(+rz-1.)/2.)*x(3)+(+rx*(+rx-
     /1.)/2.*ry*(+ry-1.)/2.*(+1.-rz**2))*x(13)+(+(+1.-rx**2)*
     /ry*(+ry-1.)/2.*(+1.-rz**2))*x(22)+(+rx*(+1.+rx)/2.*ry*
     /(+ry-1.)/2.*(+1.-rz**2))*x(14)+(+rx*(+rx-1.)/2.*(+1.-
     /ry**2)*(+1.-rz**2))*x(25)+(+(+1.-rx**2)*(+1.-ry**2)*(+
     /1.-rz**2))*x(27)+(+rx*(+1.+rx)/2.*(+1.-ry**2)*(+1.-rz**
     /2))*x(23)+(+rx*(+rx-1.)/2.*ry*(+1.+ry)/2.*(+1.-rz**2))*x(16)
     /+(+(+1.-rx**2)*ry*(+1.+ry)/2.*(+1.-rz**2))*x(24)+(+rx*
     /(+1.+rx)/2.*ry*(+1.+ry)/2.*(+1.-rz**2))*x(15)+(+rx*(+
     /rx-1.)/2.*ry*(+ry-1.)/2.*rz*(+1.+rz)/2.)*x(5)+(+(+1.-
     /rx**2)*ry*(+ry-1.)/2.*rz*(+1.+rz)/2.)*x(17)+(+rx*(+1.+
     /rx)/2.*ry*(+ry-1.)/2.*rz*(+1.+rz)/2.)*x(6)+(+rx*(+rx-
     /1.)/2.*(+1.-ry**2)*rz*(+1.+rz)/2.)*x(20)+(+(+1.-rx**2)*
     /(+1.-ry**2)*rz*(+1.+rz)/2.)*x(26)+(+rx*(+1.+rx)/2.*(+
     /1.-ry**2)*rz*(+1.+rz)/2.)*x(18)+(+rx*(+rx-1.)/2.*ry*(+
     /1.+ry)/2.*rz*(+1.+rz)/2.)*x(8)+(+(+1.-rx**2)*ry*(+1.+
     /ry)/2.*rz*(+1.+rz)/2.)*x(19)+(+rx*(+1.+rx)/2.*ry*(+1.+
     /ry)/2.*rz*(+1.+rz)/2.)*x(7)
      coor(2)=+(+rx*(+rx-1.)/2.*ry*(+ry-1.)/2.*rz*(+rz-
     /1.)/2.)*y(1)+(+(+1.-rx**2)*ry*(+ry-1.)/2.*rz*(+rz-1.)/
     /2.)*y(9)+(+rx*(+1.+rx)/2.*ry*(+ry-1.)/2.*rz*(+rz-1.)/
     /2.)*y(2)+(+rx*(+rx-1.)/2.*(+1.-ry**2)*rz*(+rz-1.)/2.)*y(12)
     /+(+(+1.-rx**2)*(+1.-ry**2)*rz*(+rz-1.)/2.)*y(21)+(+rx*
     /(+1.+rx)/2.*(+1.-ry**2)*rz*(+rz-1.)/2.)*y(10)+(+rx*(+
     /rx-1.)/2.*ry*(+1.+ry)/2.*rz*(+rz-1.)/2.)*y(4)+(+(+1.-
     /rx**2)*ry*(+1.+ry)/2.*rz*(+rz-1.)/2.)*y(11)+(+rx*(+1.+
     /rx)/2.*ry*(+1.+ry)/2.*rz*(+rz-1.)/2.)*y(3)+(+rx*(+rx-
     /1.)/2.*ry*(+ry-1.)/2.*(+1.-rz**2))*y(13)+(+(+1.-rx**2)*
     /ry*(+ry-1.)/2.*(+1.-rz**2))*y(22)+(+rx*(+1.+rx)/2.*ry*
     /(+ry-1.)/2.*(+1.-rz**2))*y(14)+(+rx*(+rx-1.)/2.*(+1.-
     /ry**2)*(+1.-rz**2))*y(25)+(+(+1.-rx**2)*(+1.-ry**2)*(+
     /1.-rz**2))*y(27)+(+rx*(+1.+rx)/2.*(+1.-ry**2)*(+1.-rz**
     /2))*y(23)+(+rx*(+rx-1.)/2.*ry*(+1.+ry)/2.*(+1.-rz**2))*y(16)
     /+(+(+1.-rx**2)*ry*(+1.+ry)/2.*(+1.-rz**2))*y(24)+(+rx*
     /(+1.+rx)/2.*ry*(+1.+ry)/2.*(+1.-rz**2))*y(15)+(+rx*(+
     /rx-1.)/2.*ry*(+ry-1.)/2.*rz*(+1.+rz)/2.)*y(5)+(+(+1.-
     /rx**2)*ry*(+ry-1.)/2.*rz*(+1.+rz)/2.)*y(17)+(+rx*(+1.+
     /rx)/2.*ry*(+ry-1.)/2.*rz*(+1.+rz)/2.)*y(6)+(+rx*(+rx-
     /1.)/2.*(+1.-ry**2)*rz*(+1.+rz)/2.)*y(20)+(+(+1.-rx**2)*
     /(+1.-ry**2)*rz*(+1.+rz)/2.)*y(26)+(+rx*(+1.+rx)/2.*(+
     /1.-ry**2)*rz*(+1.+rz)/2.)*y(18)+(+rx*(+rx-1.)/2.*ry*(+
     /1.+ry)/2.*rz*(+1.+rz)/2.)*y(8)+(+(+1.-rx**2)*ry*(+1.+
     /ry)/2.*rz*(+1.+rz)/2.)*y(19)+(+rx*(+1.+rx)/2.*ry*(+1.+
     /ry)/2.*rz*(+1.+rz)/2.)*y(7)
      coor(3)=+(+rx*(+rx-1.)/2.*ry*(+ry-1.)/2.*rz*(+rz-
     /1.)/2.)*z(1)+(+(+1.-rx**2)*ry*(+ry-1.)/2.*rz*(+rz-1.)/
     /2.)*z(9)+(+rx*(+1.+rx)/2.*ry*(+ry-1.)/2.*rz*(+rz-1.)/
     /2.)*z(2)+(+rx*(+rx-1.)/2.*(+1.-ry**2)*rz*(+rz-1.)/2.)*z(12)
     /+(+(+1.-rx**2)*(+1.-ry**2)*rz*(+rz-1.)/2.)*z(21)+(+rx*
     /(+1.+rx)/2.*(+1.-ry**2)*rz*(+rz-1.)/2.)*z(10)+(+rx*(+
     /rx-1.)/2.*ry*(+1.+ry)/2.*rz*(+rz-1.)/2.)*z(4)+(+(+1.-
     /rx**2)*ry*(+1.+ry)/2.*rz*(+rz-1.)/2.)*z(11)+(+rx*(+1.+
     /rx)/2.*ry*(+1.+ry)/2.*rz*(+rz-1.)/2.)*z(3)+(+rx*(+rx-
     /1.)/2.*ry*(+ry-1.)/2.*(+1.-rz**2))*z(13)+(+(+1.-rx**2)*
     /ry*(+ry-1.)/2.*(+1.-rz**2))*z(22)+(+rx*(+1.+rx)/2.*ry*
     /(+ry-1.)/2.*(+1.-rz**2))*z(14)+(+rx*(+rx-1.)/2.*(+1.-
     /ry**2)*(+1.-rz**2))*z(25)+(+(+1.-rx**2)*(+1.-ry**2)*(+
     /1.-rz**2))*z(27)+(+rx*(+1.+rx)/2.*(+1.-ry**2)*(+1.-rz**
     /2))*z(23)+(+rx*(+rx-1.)/2.*ry*(+1.+ry)/2.*(+1.-rz**2))*z(16)
     /+(+(+1.-rx**2)*ry*(+1.+ry)/2.*(+1.-rz**2))*z(24)+(+rx*
     /(+1.+rx)/2.*ry*(+1.+ry)/2.*(+1.-rz**2))*z(15)+(+rx*(+
     /rx-1.)/2.*ry*(+ry-1.)/2.*rz*(+1.+rz)/2.)*z(5)+(+(+1.-
     /rx**2)*ry*(+ry-1.)/2.*rz*(+1.+rz)/2.)*z(17)+(+rx*(+1.+
     /rx)/2.*ry*(+ry-1.)/2.*rz*(+1.+rz)/2.)*z(6)+(+rx*(+rx-
     /1.)/2.*(+1.-ry**2)*rz*(+1.+rz)/2.)*z(20)+(+(+1.-rx**2)*
     /(+1.-ry**2)*rz*(+1.+rz)/2.)*z(26)+(+rx*(+1.+rx)/2.*(+
     /1.-ry**2)*rz*(+1.+rz)/2.)*z(18)+(+rx*(+rx-1.)/2.*ry*(+
     /1.+ry)/2.*rz*(+1.+rz)/2.)*z(8)+(+(+1.-rx**2)*ry*(+1.+
     /ry)/2.*rz*(+1.+rz)/2.)*z(19)+(+rx*(+1.+rx)/2.*ry*(+1.+
     /ry)/2.*rz*(+1.+rz)/2.)*z(7)
      rc(1,1)=+(+(+rx-1.)/2.*ry*(+ry-1.)/2.*rz*(+rz-1.)/
     /2.+rx*(+1.)/2.*ry*(+ry-1.)/2.*rz*(+rz-1.)/2.)*x(1)+(+
     /(-2.*rx)*ry*(+ry-1.)/2.*rz*(+rz-1.)/2.)*x(9)+(+(+1.+
     /rx)/2.*ry*(+ry-1.)/2.*rz*(+rz-1.)/2.+rx*(+1.)/2.*ry*
     /(+ry-1.)/2.*rz*(+rz-1.)/2.)*x(2)+(+(+rx-1.)/2.*(+1.-
     /ry**2)*rz*(+rz-1.)/2.+rx*(+1.)/2.*(+1.-ry**2)*rz*(+
     /rz-1.)/2.)*x(12)+(+(-2.*rx)*(+1.-ry**2)*rz*(+rz-1.)/2.)*x(21)
     /+(+(+1.+rx)/2.*(+1.-ry**2)*rz*(+rz-1.)/2.+rx*(+1.)/
     /2.*(+1.-ry**2)*rz*(+rz-1.)/2.)*x(10)+(+(+rx-1.)/2.*ry*
     /(+1.+ry)/2.*rz*(+rz-1.)/2.+rx*(+1.)/2.*ry*(+1.+ry)/
     /2.*rz*(+rz-1.)/2.)*x(4)+(+(-2.*rx)*ry*(+1.+ry)/2.*rz*
     /(+rz-1.)/2.)*x(11)+(+(+1.+rx)/2.*ry*(+1.+ry)/2.*rz*(+
     /rz-1.)/2.+rx*(+1.)/2.*ry*(+1.+ry)/2.*rz*(+rz-1.)/2.)*x(3)
     /+(+(+rx-1.)/2.*ry*(+ry-1.)/2.*(+1.-rz**2)+rx*(+1.)/
     /2.*ry*(+ry-1.)/2.*(+1.-rz**2))*x(13)+(+(-2.*rx)*ry*(+
     /ry-1.)/2.*(+1.-rz**2))*x(22)+(+(+1.+rx)/2.*ry*(+ry-1.)/
     /2.*(+1.-rz**2)+rx*(+1.)/2.*ry*(+ry-1.)/2.*(+1.-rz**
     /2))*x(14)+(+(+rx-1.)/2.*(+1.-ry**2)*(+1.-rz**2)+rx*(+
     /1.)/2.*(+1.-ry**2)*(+1.-rz**2))*x(25)+(+(-2.*rx)*(+1.-
     /ry**2)*(+1.-rz**2))*x(27)+(+(+1.+rx)/2.*(+1.-ry**2)*(+
     /1.-rz**2)+rx*(+1.)/2.*(+1.-ry**2)*(+1.-rz**2))*x(23)+(+
     /(+rx-1.)/2.*ry*(+1.+ry)/2.*(+1.-rz**2)+rx*(+1.)/2.*
     /ry*(+1.+ry)/2.*(+1.-rz**2))*x(16)+(+(-2.*rx)*ry*(+1.+
     /ry)/2.*(+1.-rz**2))*x(24)+(+(+1.+rx)/2.*ry*(+1.+ry)/2.*
     /(+1.-rz**2)+rx*(+1.)/2.*ry*(+1.+ry)/2.*(+1.-rz**2))*x(15)
     /+(+(+rx-1.)/2.*ry*(+ry-1.)/2.*rz*(+1.+rz)/2.+rx*(+1.)/
     /2.*ry*(+ry-1.)/2.*rz*(+1.+rz)/2.)*x(5)+(+(-2.*rx)*ry*
     /(+ry-1.)/2.*rz*(+1.+rz)/2.)*x(17)+(+(+1.+rx)/2.*ry*(+
     /ry-1.)/2.*rz*(+1.+rz)/2.+rx*(+1.)/2.*ry*(+ry-1.)/2.*
     /rz*(+1.+rz)/2.)*x(6)+(+(+rx-1.)/2.*(+1.-ry**2)*rz*(+
     /1.+rz)/2.+rx*(+1.)/2.*(+1.-ry**2)*rz*(+1.+rz)/2.)*x(20)
     /+(+(-2.*rx)*(+1.-ry**2)*rz*(+1.+rz)/2.)*x(26)+(+(+1.+
     /rx)/2.*(+1.-ry**2)*rz*(+1.+rz)/2.+rx*(+1.)/2.*(+1.-
     /ry**2)*rz*(+1.+rz)/2.)*x(18)+(+(+rx-1.)/2.*ry*(+1.+ry)/
     /2.*rz*(+1.+rz)/2.+rx*(+1.)/2.*ry*(+1.+ry)/2.*rz*(+1.+
     /rz)/2.)*x(8)+(+(-2.*rx)*ry*(+1.+ry)/2.*rz*(+1.+rz)/2.)*x(19)
     /+(+(+1.+rx)/2.*ry*(+1.+ry)/2.*rz*(+1.+rz)/2.+rx*(+1.)/
     /2.*ry*(+1.+ry)/2.*rz*(+1.+rz)/2.)*x(7)
      rc(2,1)=+(+(+rx-1.)/2.*ry*(+ry-1.)/2.*rz*(+rz-1.)/
     /2.+rx*(+1.)/2.*ry*(+ry-1.)/2.*rz*(+rz-1.)/2.)*y(1)+(+
     /(-2.*rx)*ry*(+ry-1.)/2.*rz*(+rz-1.)/2.)*y(9)+(+(+1.+
     /rx)/2.*ry*(+ry-1.)/2.*rz*(+rz-1.)/2.+rx*(+1.)/2.*ry*
     /(+ry-1.)/2.*rz*(+rz-1.)/2.)*y(2)+(+(+rx-1.)/2.*(+1.-
     /ry**2)*rz*(+rz-1.)/2.+rx*(+1.)/2.*(+1.-ry**2)*rz*(+
     /rz-1.)/2.)*y(12)+(+(-2.*rx)*(+1.-ry**2)*rz*(+rz-1.)/2.)*y(21)
     /+(+(+1.+rx)/2.*(+1.-ry**2)*rz*(+rz-1.)/2.+rx*(+1.)/
     /2.*(+1.-ry**2)*rz*(+rz-1.)/2.)*y(10)+(+(+rx-1.)/2.*ry*
     /(+1.+ry)/2.*rz*(+rz-1.)/2.+rx*(+1.)/2.*ry*(+1.+ry)/
     /2.*rz*(+rz-1.)/2.)*y(4)+(+(-2.*rx)*ry*(+1.+ry)/2.*rz*
     /(+rz-1.)/2.)*y(11)+(+(+1.+rx)/2.*ry*(+1.+ry)/2.*rz*(+
     /rz-1.)/2.+rx*(+1.)/2.*ry*(+1.+ry)/2.*rz*(+rz-1.)/2.)*y(3)
     /+(+(+rx-1.)/2.*ry*(+ry-1.)/2.*(+1.-rz**2)+rx*(+1.)/
     /2.*ry*(+ry-1.)/2.*(+1.-rz**2))*y(13)+(+(-2.*rx)*ry*(+
     /ry-1.)/2.*(+1.-rz**2))*y(22)+(+(+1.+rx)/2.*ry*(+ry-1.)/
     /2.*(+1.-rz**2)+rx*(+1.)/2.*ry*(+ry-1.)/2.*(+1.-rz**
     /2))*y(14)+(+(+rx-1.)/2.*(+1.-ry**2)*(+1.-rz**2)+rx*(+
     /1.)/2.*(+1.-ry**2)*(+1.-rz**2))*y(25)+(+(-2.*rx)*(+1.-
     /ry**2)*(+1.-rz**2))*y(27)+(+(+1.+rx)/2.*(+1.-ry**2)*(+
     /1.-rz**2)+rx*(+1.)/2.*(+1.-ry**2)*(+1.-rz**2))*y(23)+(+
     /(+rx-1.)/2.*ry*(+1.+ry)/2.*(+1.-rz**2)+rx*(+1.)/2.*
     /ry*(+1.+ry)/2.*(+1.-rz**2))*y(16)+(+(-2.*rx)*ry*(+1.+
     /ry)/2.*(+1.-rz**2))*y(24)+(+(+1.+rx)/2.*ry*(+1.+ry)/2.*
     /(+1.-rz**2)+rx*(+1.)/2.*ry*(+1.+ry)/2.*(+1.-rz**2))*y(15)
     /+(+(+rx-1.)/2.*ry*(+ry-1.)/2.*rz*(+1.+rz)/2.+rx*(+1.)/
     /2.*ry*(+ry-1.)/2.*rz*(+1.+rz)/2.)*y(5)+(+(-2.*rx)*ry*
     /(+ry-1.)/2.*rz*(+1.+rz)/2.)*y(17)+(+(+1.+rx)/2.*ry*(+
     /ry-1.)/2.*rz*(+1.+rz)/2.+rx*(+1.)/2.*ry*(+ry-1.)/2.*
     /rz*(+1.+rz)/2.)*y(6)+(+(+rx-1.)/2.*(+1.-ry**2)*rz*(+
     /1.+rz)/2.+rx*(+1.)/2.*(+1.-ry**2)*rz*(+1.+rz)/2.)*y(20)
     /+(+(-2.*rx)*(+1.-ry**2)*rz*(+1.+rz)/2.)*y(26)+(+(+1.+
     /rx)/2.*(+1.-ry**2)*rz*(+1.+rz)/2.+rx*(+1.)/2.*(+1.-
     /ry**2)*rz*(+1.+rz)/2.)*y(18)+(+(+rx-1.)/2.*ry*(+1.+ry)/
     /2.*rz*(+1.+rz)/2.+rx*(+1.)/2.*ry*(+1.+ry)/2.*rz*(+1.+
     /rz)/2.)*y(8)+(+(-2.*rx)*ry*(+1.+ry)/2.*rz*(+1.+rz)/2.)*y(19)
     /+(+(+1.+rx)/2.*ry*(+1.+ry)/2.*rz*(+1.+rz)/2.+rx*(+1.)/
     /2.*ry*(+1.+ry)/2.*rz*(+1.+rz)/2.)*y(7)
      rc(3,1)=+(+(+rx-1.)/2.*ry*(+ry-1.)/2.*rz*(+rz-1.)/
     /2.+rx*(+1.)/2.*ry*(+ry-1.)/2.*rz*(+rz-1.)/2.)*z(1)+(+
     /(-2.*rx)*ry*(+ry-1.)/2.*rz*(+rz-1.)/2.)*z(9)+(+(+1.+
     /rx)/2.*ry*(+ry-1.)/2.*rz*(+rz-1.)/2.+rx*(+1.)/2.*ry*
     /(+ry-1.)/2.*rz*(+rz-1.)/2.)*z(2)+(+(+rx-1.)/2.*(+1.-
     /ry**2)*rz*(+rz-1.)/2.+rx*(+1.)/2.*(+1.-ry**2)*rz*(+
     /rz-1.)/2.)*z(12)+(+(-2.*rx)*(+1.-ry**2)*rz*(+rz-1.)/2.)*z(21)
     /+(+(+1.+rx)/2.*(+1.-ry**2)*rz*(+rz-1.)/2.+rx*(+1.)/
     /2.*(+1.-ry**2)*rz*(+rz-1.)/2.)*z(10)+(+(+rx-1.)/2.*ry*
     /(+1.+ry)/2.*rz*(+rz-1.)/2.+rx*(+1.)/2.*ry*(+1.+ry)/
     /2.*rz*(+rz-1.)/2.)*z(4)+(+(-2.*rx)*ry*(+1.+ry)/2.*rz*
     /(+rz-1.)/2.)*z(11)+(+(+1.+rx)/2.*ry*(+1.+ry)/2.*rz*(+
     /rz-1.)/2.+rx*(+1.)/2.*ry*(+1.+ry)/2.*rz*(+rz-1.)/2.)*z(3)
     /+(+(+rx-1.)/2.*ry*(+ry-1.)/2.*(+1.-rz**2)+rx*(+1.)/
     /2.*ry*(+ry-1.)/2.*(+1.-rz**2))*z(13)+(+(-2.*rx)*ry*(+
     /ry-1.)/2.*(+1.-rz**2))*z(22)+(+(+1.+rx)/2.*ry*(+ry-1.)/
     /2.*(+1.-rz**2)+rx*(+1.)/2.*ry*(+ry-1.)/2.*(+1.-rz**
     /2))*z(14)+(+(+rx-1.)/2.*(+1.-ry**2)*(+1.-rz**2)+rx*(+
     /1.)/2.*(+1.-ry**2)*(+1.-rz**2))*z(25)+(+(-2.*rx)*(+1.-
     /ry**2)*(+1.-rz**2))*z(27)+(+(+1.+rx)/2.*(+1.-ry**2)*(+
     /1.-rz**2)+rx*(+1.)/2.*(+1.-ry**2)*(+1.-rz**2))*z(23)+(+
     /(+rx-1.)/2.*ry*(+1.+ry)/2.*(+1.-rz**2)+rx*(+1.)/2.*
     /ry*(+1.+ry)/2.*(+1.-rz**2))*z(16)+(+(-2.*rx)*ry*(+1.+
     /ry)/2.*(+1.-rz**2))*z(24)+(+(+1.+rx)/2.*ry*(+1.+ry)/2.*
     /(+1.-rz**2)+rx*(+1.)/2.*ry*(+1.+ry)/2.*(+1.-rz**2))*z(15)
     /+(+(+rx-1.)/2.*ry*(+ry-1.)/2.*rz*(+1.+rz)/2.+rx*(+1.)/
     /2.*ry*(+ry-1.)/2.*rz*(+1.+rz)/2.)*z(5)+(+(-2.*rx)*ry*
     /(+ry-1.)/2.*rz*(+1.+rz)/2.)*z(17)+(+(+1.+rx)/2.*ry*(+
     /ry-1.)/2.*rz*(+1.+rz)/2.+rx*(+1.)/2.*ry*(+ry-1.)/2.*
     /rz*(+1.+rz)/2.)*z(6)+(+(+rx-1.)/2.*(+1.-ry**2)*rz*(+
     /1.+rz)/2.+rx*(+1.)/2.*(+1.-ry**2)*rz*(+1.+rz)/2.)*z(20)
     /+(+(-2.*rx)*(+1.-ry**2)*rz*(+1.+rz)/2.)*z(26)+(+(+1.+
     /rx)/2.*(+1.-ry**2)*rz*(+1.+rz)/2.+rx*(+1.)/2.*(+1.-
     /ry**2)*rz*(+1.+rz)/2.)*z(18)+(+(+rx-1.)/2.*ry*(+1.+ry)/
     /2.*rz*(+1.+rz)/2.+rx*(+1.)/2.*ry*(+1.+ry)/2.*rz*(+1.+
     /rz)/2.)*z(8)+(+(-2.*rx)*ry*(+1.+ry)/2.*rz*(+1.+rz)/2.)*z(19)
     /+(+(+1.+rx)/2.*ry*(+1.+ry)/2.*rz*(+1.+rz)/2.+rx*(+1.)/
     /2.*ry*(+1.+ry)/2.*rz*(+1.+rz)/2.)*z(7)
      rc(1,2)=+(+rx*(+rx-1.)/2.*(+ry-1.)/2.*rz*(+rz-1.)/
     /2.+rx*(+rx-1.)/2.*ry*(+1.)/2.*rz*(+rz-1.)/2.)*x(1)+(+
     /(+1.-rx**2)*(+ry-1.)/2.*rz*(+rz-1.)/2.+(+1.-rx**2)*
     /ry*(+1.)/2.*rz*(+rz-1.)/2.)*x(9)+(+rx*(+1.+rx)/2.*(+
     /ry-1.)/2.*rz*(+rz-1.)/2.+rx*(+1.+rx)/2.*ry*(+1.)/2.*
     /rz*(+rz-1.)/2.)*x(2)+(+rx*(+rx-1.)/2.*(-2.*ry)*rz*(+
     /rz-1.)/2.)*x(12)+(+(+1.-rx**2)*(-2.*ry)*rz*(+rz-1.)/2.)*x(21)
     /+(+rx*(+1.+rx)/2.*(-2.*ry)*rz*(+rz-1.)/2.)*x(10)+(+rx*
     /(+rx-1.)/2.*(+1.+ry)/2.*rz*(+rz-1.)/2.+rx*(+rx-1.)/
     /2.*ry*(+1.)/2.*rz*(+rz-1.)/2.)*x(4)+(+(+1.-rx**2)*(+
     /1.+ry)/2.*rz*(+rz-1.)/2.+(+1.-rx**2)*ry*(+1.)/2.*rz*
     /(+rz-1.)/2.)*x(11)+(+rx*(+1.+rx)/2.*(+1.+ry)/2.*rz*(+
     /rz-1.)/2.+rx*(+1.+rx)/2.*ry*(+1.)/2.*rz*(+rz-1.)/2.)*x(3)
     /+(+rx*(+rx-1.)/2.*(+ry-1.)/2.*(+1.-rz**2)+rx*(+rx-1.)/
     /2.*ry*(+1.)/2.*(+1.-rz**2))*x(13)+(+(+1.-rx**2)*(+ry-
     /1.)/2.*(+1.-rz**2)+(+1.-rx**2)*ry*(+1.)/2.*(+1.-rz**
     /2))*x(22)+(+rx*(+1.+rx)/2.*(+ry-1.)/2.*(+1.-rz**2)+rx*
     /(+1.+rx)/2.*ry*(+1.)/2.*(+1.-rz**2))*x(14)+(+rx*(+rx-
     /1.)/2.*(-2.*ry)*(+1.-rz**2))*x(25)+(+(+1.-rx**2)*(-2.*
     /ry)*(+1.-rz**2))*x(27)+(+rx*(+1.+rx)/2.*(-2.*ry)*(+1.-
     /rz**2))*x(23)+(+rx*(+rx-1.)/2.*(+1.+ry)/2.*(+1.-rz**2)+
     /rx*(+rx-1.)/2.*ry*(+1.)/2.*(+1.-rz**2))*x(16)+(+(+1.-
     /rx**2)*(+1.+ry)/2.*(+1.-rz**2)+(+1.-rx**2)*ry*(+1.)/
     /2.*(+1.-rz**2))*x(24)+(+rx*(+1.+rx)/2.*(+1.+ry)/2.*(+
     /1.-rz**2)+rx*(+1.+rx)/2.*ry*(+1.)/2.*(+1.-rz**2))*x(15)
     /+(+rx*(+rx-1.)/2.*(+ry-1.)/2.*rz*(+1.+rz)/2.+rx*(+rx-
     /1.)/2.*ry*(+1.)/2.*rz*(+1.+rz)/2.)*x(5)+(+(+1.-rx**2)*
     /(+ry-1.)/2.*rz*(+1.+rz)/2.+(+1.-rx**2)*ry*(+1.)/2.*
     /rz*(+1.+rz)/2.)*x(17)+(+rx*(+1.+rx)/2.*(+ry-1.)/2.*rz*
     /(+1.+rz)/2.+rx*(+1.+rx)/2.*ry*(+1.)/2.*rz*(+1.+rz)/
     /2.)*x(6)+(+rx*(+rx-1.)/2.*(-2.*ry)*rz*(+1.+rz)/2.)*x(20)
     /+(+(+1.-rx**2)*(-2.*ry)*rz*(+1.+rz)/2.)*x(26)+(+rx*(+
     /1.+rx)/2.*(-2.*ry)*rz*(+1.+rz)/2.)*x(18)+(+rx*(+rx-1.)/
     /2.*(+1.+ry)/2.*rz*(+1.+rz)/2.+rx*(+rx-1.)/2.*ry*(+1.)/
     /2.*rz*(+1.+rz)/2.)*x(8)+(+(+1.-rx**2)*(+1.+ry)/2.*rz*
     /(+1.+rz)/2.+(+1.-rx**2)*ry*(+1.)/2.*rz*(+1.+rz)/2.)*x(19)
     /+(+rx*(+1.+rx)/2.*(+1.+ry)/2.*rz*(+1.+rz)/2.+rx*(+1.+
     /rx)/2.*ry*(+1.)/2.*rz*(+1.+rz)/2.)*x(7)
      rc(2,2)=+(+rx*(+rx-1.)/2.*(+ry-1.)/2.*rz*(+rz-1.)/
     /2.+rx*(+rx-1.)/2.*ry*(+1.)/2.*rz*(+rz-1.)/2.)*y(1)+(+
     /(+1.-rx**2)*(+ry-1.)/2.*rz*(+rz-1.)/2.+(+1.-rx**2)*
     /ry*(+1.)/2.*rz*(+rz-1.)/2.)*y(9)+(+rx*(+1.+rx)/2.*(+
     /ry-1.)/2.*rz*(+rz-1.)/2.+rx*(+1.+rx)/2.*ry*(+1.)/2.*
     /rz*(+rz-1.)/2.)*y(2)+(+rx*(+rx-1.)/2.*(-2.*ry)*rz*(+
     /rz-1.)/2.)*y(12)+(+(+1.-rx**2)*(-2.*ry)*rz*(+rz-1.)/2.)*y(21)
     /+(+rx*(+1.+rx)/2.*(-2.*ry)*rz*(+rz-1.)/2.)*y(10)+(+rx*
     /(+rx-1.)/2.*(+1.+ry)/2.*rz*(+rz-1.)/2.+rx*(+rx-1.)/
     /2.*ry*(+1.)/2.*rz*(+rz-1.)/2.)*y(4)+(+(+1.-rx**2)*(+
     /1.+ry)/2.*rz*(+rz-1.)/2.+(+1.-rx**2)*ry*(+1.)/2.*rz*
     /(+rz-1.)/2.)*y(11)+(+rx*(+1.+rx)/2.*(+1.+ry)/2.*rz*(+
     /rz-1.)/2.+rx*(+1.+rx)/2.*ry*(+1.)/2.*rz*(+rz-1.)/2.)*y(3)
     /+(+rx*(+rx-1.)/2.*(+ry-1.)/2.*(+1.-rz**2)+rx*(+rx-1.)/
     /2.*ry*(+1.)/2.*(+1.-rz**2))*y(13)+(+(+1.-rx**2)*(+ry-
     /1.)/2.*(+1.-rz**2)+(+1.-rx**2)*ry*(+1.)/2.*(+1.-rz**
     /2))*y(22)+(+rx*(+1.+rx)/2.*(+ry-1.)/2.*(+1.-rz**2)+rx*
     /(+1.+rx)/2.*ry*(+1.)/2.*(+1.-rz**2))*y(14)+(+rx*(+rx-
     /1.)/2.*(-2.*ry)*(+1.-rz**2))*y(25)+(+(+1.-rx**2)*(-2.*
     /ry)*(+1.-rz**2))*y(27)+(+rx*(+1.+rx)/2.*(-2.*ry)*(+1.-
     /rz**2))*y(23)+(+rx*(+rx-1.)/2.*(+1.+ry)/2.*(+1.-rz**2)+
     /rx*(+rx-1.)/2.*ry*(+1.)/2.*(+1.-rz**2))*y(16)+(+(+1.-
     /rx**2)*(+1.+ry)/2.*(+1.-rz**2)+(+1.-rx**2)*ry*(+1.)/
     /2.*(+1.-rz**2))*y(24)+(+rx*(+1.+rx)/2.*(+1.+ry)/2.*(+
     /1.-rz**2)+rx*(+1.+rx)/2.*ry*(+1.)/2.*(+1.-rz**2))*y(15)
     /+(+rx*(+rx-1.)/2.*(+ry-1.)/2.*rz*(+1.+rz)/2.+rx*(+rx-
     /1.)/2.*ry*(+1.)/2.*rz*(+1.+rz)/2.)*y(5)+(+(+1.-rx**2)*
     /(+ry-1.)/2.*rz*(+1.+rz)/2.+(+1.-rx**2)*ry*(+1.)/2.*
     /rz*(+1.+rz)/2.)*y(17)+(+rx*(+1.+rx)/2.*(+ry-1.)/2.*rz*
     /(+1.+rz)/2.+rx*(+1.+rx)/2.*ry*(+1.)/2.*rz*(+1.+rz)/
     /2.)*y(6)+(+rx*(+rx-1.)/2.*(-2.*ry)*rz*(+1.+rz)/2.)*y(20)
     /+(+(+1.-rx**2)*(-2.*ry)*rz*(+1.+rz)/2.)*y(26)+(+rx*(+
     /1.+rx)/2.*(-2.*ry)*rz*(+1.+rz)/2.)*y(18)+(+rx*(+rx-1.)/
     /2.*(+1.+ry)/2.*rz*(+1.+rz)/2.+rx*(+rx-1.)/2.*ry*(+1.)/
     /2.*rz*(+1.+rz)/2.)*y(8)+(+(+1.-rx**2)*(+1.+ry)/2.*rz*
     /(+1.+rz)/2.+(+1.-rx**2)*ry*(+1.)/2.*rz*(+1.+rz)/2.)*y(19)
     /+(+rx*(+1.+rx)/2.*(+1.+ry)/2.*rz*(+1.+rz)/2.+rx*(+1.+
     /rx)/2.*ry*(+1.)/2.*rz*(+1.+rz)/2.)*y(7)
      rc(3,2)=+(+rx*(+rx-1.)/2.*(+ry-1.)/2.*rz*(+rz-1.)/
     /2.+rx*(+rx-1.)/2.*ry*(+1.)/2.*rz*(+rz-1.)/2.)*z(1)+(+
     /(+1.-rx**2)*(+ry-1.)/2.*rz*(+rz-1.)/2.+(+1.-rx**2)*
     /ry*(+1.)/2.*rz*(+rz-1.)/2.)*z(9)+(+rx*(+1.+rx)/2.*(+
     /ry-1.)/2.*rz*(+rz-1.)/2.+rx*(+1.+rx)/2.*ry*(+1.)/2.*
     /rz*(+rz-1.)/2.)*z(2)+(+rx*(+rx-1.)/2.*(-2.*ry)*rz*(+
     /rz-1.)/2.)*z(12)+(+(+1.-rx**2)*(-2.*ry)*rz*(+rz-1.)/2.)*z(21)
     /+(+rx*(+1.+rx)/2.*(-2.*ry)*rz*(+rz-1.)/2.)*z(10)+(+rx*
     /(+rx-1.)/2.*(+1.+ry)/2.*rz*(+rz-1.)/2.+rx*(+rx-1.)/
     /2.*ry*(+1.)/2.*rz*(+rz-1.)/2.)*z(4)+(+(+1.-rx**2)*(+
     /1.+ry)/2.*rz*(+rz-1.)/2.+(+1.-rx**2)*ry*(+1.)/2.*rz*
     /(+rz-1.)/2.)*z(11)+(+rx*(+1.+rx)/2.*(+1.+ry)/2.*rz*(+
     /rz-1.)/2.+rx*(+1.+rx)/2.*ry*(+1.)/2.*rz*(+rz-1.)/2.)*z(3)
     /+(+rx*(+rx-1.)/2.*(+ry-1.)/2.*(+1.-rz**2)+rx*(+rx-1.)/
     /2.*ry*(+1.)/2.*(+1.-rz**2))*z(13)+(+(+1.-rx**2)*(+ry-
     /1.)/2.*(+1.-rz**2)+(+1.-rx**2)*ry*(+1.)/2.*(+1.-rz**
     /2))*z(22)+(+rx*(+1.+rx)/2.*(+ry-1.)/2.*(+1.-rz**2)+rx*
     /(+1.+rx)/2.*ry*(+1.)/2.*(+1.-rz**2))*z(14)+(+rx*(+rx-
     /1.)/2.*(-2.*ry)*(+1.-rz**2))*z(25)+(+(+1.-rx**2)*(-2.*
     /ry)*(+1.-rz**2))*z(27)+(+rx*(+1.+rx)/2.*(-2.*ry)*(+1.-
     /rz**2))*z(23)+(+rx*(+rx-1.)/2.*(+1.+ry)/2.*(+1.-rz**2)+
     /rx*(+rx-1.)/2.*ry*(+1.)/2.*(+1.-rz**2))*z(16)+(+(+1.-
     /rx**2)*(+1.+ry)/2.*(+1.-rz**2)+(+1.-rx**2)*ry*(+1.)/
     /2.*(+1.-rz**2))*z(24)+(+rx*(+1.+rx)/2.*(+1.+ry)/2.*(+
     /1.-rz**2)+rx*(+1.+rx)/2.*ry*(+1.)/2.*(+1.-rz**2))*z(15)
     /+(+rx*(+rx-1.)/2.*(+ry-1.)/2.*rz*(+1.+rz)/2.+rx*(+rx-
     /1.)/2.*ry*(+1.)/2.*rz*(+1.+rz)/2.)*z(5)+(+(+1.-rx**2)*
     /(+ry-1.)/2.*rz*(+1.+rz)/2.+(+1.-rx**2)*ry*(+1.)/2.*
     /rz*(+1.+rz)/2.)*z(17)+(+rx*(+1.+rx)/2.*(+ry-1.)/2.*rz*
     /(+1.+rz)/2.+rx*(+1.+rx)/2.*ry*(+1.)/2.*rz*(+1.+rz)/
     /2.)*z(6)+(+rx*(+rx-1.)/2.*(-2.*ry)*rz*(+1.+rz)/2.)*z(20)
     /+(+(+1.-rx**2)*(-2.*ry)*rz*(+1.+rz)/2.)*z(26)+(+rx*(+
     /1.+rx)/2.*(-2.*ry)*rz*(+1.+rz)/2.)*z(18)+(+rx*(+rx-1.)/
     /2.*(+1.+ry)/2.*rz*(+1.+rz)/2.+rx*(+rx-1.)/2.*ry*(+1.)/
     /2.*rz*(+1.+rz)/2.)*z(8)+(+(+1.-rx**2)*(+1.+ry)/2.*rz*
     /(+1.+rz)/2.+(+1.-rx**2)*ry*(+1.)/2.*rz*(+1.+rz)/2.)*z(19)
     /+(+rx*(+1.+rx)/2.*(+1.+ry)/2.*rz*(+1.+rz)/2.+rx*(+1.+
     /rx)/2.*ry*(+1.)/2.*rz*(+1.+rz)/2.)*z(7)
      rc(1,3)=+(+rx*(+rx-1.)/2.*ry*(+ry-1.)/2.*(+rz-1.)/
     /2.+rx*(+rx-1.)/2.*ry*(+ry-1.)/2.*rz*(+1.)/2.)*x(1)+(+
     /(+1.-rx**2)*ry*(+ry-1.)/2.*(+rz-1.)/2.+(+1.-rx**2)*
     /ry*(+ry-1.)/2.*rz*(+1.)/2.)*x(9)+(+rx*(+1.+rx)/2.*ry*
     /(+ry-1.)/2.*(+rz-1.)/2.+rx*(+1.+rx)/2.*ry*(+ry-1.)/
     /2.*rz*(+1.)/2.)*x(2)+(+rx*(+rx-1.)/2.*(+1.-ry**2)*(+
     /rz-1.)/2.+rx*(+rx-1.)/2.*(+1.-ry**2)*rz*(+1.)/2.)*x(12)
     /+(+(+1.-rx**2)*(+1.-ry**2)*(+rz-1.)/2.+(+1.-rx**2)*
     /(+1.-ry**2)*rz*(+1.)/2.)*x(21)+(+rx*(+1.+rx)/2.*(+1.-
     /ry**2)*(+rz-1.)/2.+rx*(+1.+rx)/2.*(+1.-ry**2)*rz*(+
     /1.)/2.)*x(10)+(+rx*(+rx-1.)/2.*ry*(+1.+ry)/2.*(+rz-1.)/
     /2.+rx*(+rx-1.)/2.*ry*(+1.+ry)/2.*rz*(+1.)/2.)*x(4)+(+
     /(+1.-rx**2)*ry*(+1.+ry)/2.*(+rz-1.)/2.+(+1.-rx**2)*
     /ry*(+1.+ry)/2.*rz*(+1.)/2.)*x(11)+(+rx*(+1.+rx)/2.*ry*
     /(+1.+ry)/2.*(+rz-1.)/2.+rx*(+1.+rx)/2.*ry*(+1.+ry)/
     /2.*rz*(+1.)/2.)*x(3)+(+rx*(+rx-1.)/2.*ry*(+ry-1.)/2.*
     /(-2.*rz))*x(13)+(+(+1.-rx**2)*ry*(+ry-1.)/2.*(-2.*rz))*x(22)
     /+(+rx*(+1.+rx)/2.*ry*(+ry-1.)/2.*(-2.*rz))*x(14)+(+rx*
     /(+rx-1.)/2.*(+1.-ry**2)*(-2.*rz))*x(25)+(+(+1.-rx**2)*
     /(+1.-ry**2)*(-2.*rz))*x(27)+(+rx*(+1.+rx)/2.*(+1.-ry**
     /2)*(-2.*rz))*x(23)+(+rx*(+rx-1.)/2.*ry*(+1.+ry)/2.*(-
     /2.*rz))*x(16)+(+(+1.-rx**2)*ry*(+1.+ry)/2.*(-2.*rz))*x(24)
     /+(+rx*(+1.+rx)/2.*ry*(+1.+ry)/2.*(-2.*rz))*x(15)+(+rx*
     /(+rx-1.)/2.*ry*(+ry-1.)/2.*(+1.+rz)/2.+rx*(+rx-1.)/
     /2.*ry*(+ry-1.)/2.*rz*(+1.)/2.)*x(5)+(+(+1.-rx**2)*ry*
     /(+ry-1.)/2.*(+1.+rz)/2.+(+1.-rx**2)*ry*(+ry-1.)/2.*
     /rz*(+1.)/2.)*x(17)+(+rx*(+1.+rx)/2.*ry*(+ry-1.)/2.*(+
     /1.+rz)/2.+rx*(+1.+rx)/2.*ry*(+ry-1.)/2.*rz*(+1.)/2.)*x(6)
     /+(+rx*(+rx-1.)/2.*(+1.-ry**2)*(+1.+rz)/2.+rx*(+rx-1.)/
     /2.*(+1.-ry**2)*rz*(+1.)/2.)*x(20)+(+(+1.-rx**2)*(+1.-
     /ry**2)*(+1.+rz)/2.+(+1.-rx**2)*(+1.-ry**2)*rz*(+1.)/
     /2.)*x(26)+(+rx*(+1.+rx)/2.*(+1.-ry**2)*(+1.+rz)/2.+rx*
     /(+1.+rx)/2.*(+1.-ry**2)*rz*(+1.)/2.)*x(18)+(+rx*(+rx-
     /1.)/2.*ry*(+1.+ry)/2.*(+1.+rz)/2.+rx*(+rx-1.)/2.*ry*
     /(+1.+ry)/2.*rz*(+1.)/2.)*x(8)+(+(+1.-rx**2)*ry*(+1.+
     /ry)/2.*(+1.+rz)/2.+(+1.-rx**2)*ry*(+1.+ry)/2.*rz*(+
     /1.)/2.)*x(19)+(+rx*(+1.+rx)/2.*ry*(+1.+ry)/2.*(+1.+rz)/
     /2.+rx*(+1.+rx)/2.*ry*(+1.+ry)/2.*rz*(+1.)/2.)*x(7)
      rc(2,3)=+(+rx*(+rx-1.)/2.*ry*(+ry-1.)/2.*(+rz-1.)/
     /2.+rx*(+rx-1.)/2.*ry*(+ry-1.)/2.*rz*(+1.)/2.)*y(1)+(+
     /(+1.-rx**2)*ry*(+ry-1.)/2.*(+rz-1.)/2.+(+1.-rx**2)*
     /ry*(+ry-1.)/2.*rz*(+1.)/2.)*y(9)+(+rx*(+1.+rx)/2.*ry*
     /(+ry-1.)/2.*(+rz-1.)/2.+rx*(+1.+rx)/2.*ry*(+ry-1.)/
     /2.*rz*(+1.)/2.)*y(2)+(+rx*(+rx-1.)/2.*(+1.-ry**2)*(+
     /rz-1.)/2.+rx*(+rx-1.)/2.*(+1.-ry**2)*rz*(+1.)/2.)*y(12)
     /+(+(+1.-rx**2)*(+1.-ry**2)*(+rz-1.)/2.+(+1.-rx**2)*
     /(+1.-ry**2)*rz*(+1.)/2.)*y(21)+(+rx*(+1.+rx)/2.*(+1.-
     /ry**2)*(+rz-1.)/2.+rx*(+1.+rx)/2.*(+1.-ry**2)*rz*(+
     /1.)/2.)*y(10)+(+rx*(+rx-1.)/2.*ry*(+1.+ry)/2.*(+rz-1.)/
     /2.+rx*(+rx-1.)/2.*ry*(+1.+ry)/2.*rz*(+1.)/2.)*y(4)+(+
     /(+1.-rx**2)*ry*(+1.+ry)/2.*(+rz-1.)/2.+(+1.-rx**2)*
     /ry*(+1.+ry)/2.*rz*(+1.)/2.)*y(11)+(+rx*(+1.+rx)/2.*ry*
     /(+1.+ry)/2.*(+rz-1.)/2.+rx*(+1.+rx)/2.*ry*(+1.+ry)/
     /2.*rz*(+1.)/2.)*y(3)+(+rx*(+rx-1.)/2.*ry*(+ry-1.)/2.*
     /(-2.*rz))*y(13)+(+(+1.-rx**2)*ry*(+ry-1.)/2.*(-2.*rz))*y(22)
     /+(+rx*(+1.+rx)/2.*ry*(+ry-1.)/2.*(-2.*rz))*y(14)+(+rx*
     /(+rx-1.)/2.*(+1.-ry**2)*(-2.*rz))*y(25)+(+(+1.-rx**2)*
     /(+1.-ry**2)*(-2.*rz))*y(27)+(+rx*(+1.+rx)/2.*(+1.-ry**
     /2)*(-2.*rz))*y(23)+(+rx*(+rx-1.)/2.*ry*(+1.+ry)/2.*(-
     /2.*rz))*y(16)+(+(+1.-rx**2)*ry*(+1.+ry)/2.*(-2.*rz))*y(24)
     /+(+rx*(+1.+rx)/2.*ry*(+1.+ry)/2.*(-2.*rz))*y(15)+(+rx*
     /(+rx-1.)/2.*ry*(+ry-1.)/2.*(+1.+rz)/2.+rx*(+rx-1.)/
     /2.*ry*(+ry-1.)/2.*rz*(+1.)/2.)*y(5)+(+(+1.-rx**2)*ry*
     /(+ry-1.)/2.*(+1.+rz)/2.+(+1.-rx**2)*ry*(+ry-1.)/2.*
     /rz*(+1.)/2.)*y(17)+(+rx*(+1.+rx)/2.*ry*(+ry-1.)/2.*(+
     /1.+rz)/2.+rx*(+1.+rx)/2.*ry*(+ry-1.)/2.*rz*(+1.)/2.)*y(6)
     /+(+rx*(+rx-1.)/2.*(+1.-ry**2)*(+1.+rz)/2.+rx*(+rx-1.)/
     /2.*(+1.-ry**2)*rz*(+1.)/2.)*y(20)+(+(+1.-rx**2)*(+1.-
     /ry**2)*(+1.+rz)/2.+(+1.-rx**2)*(+1.-ry**2)*rz*(+1.)/
     /2.)*y(26)+(+rx*(+1.+rx)/2.*(+1.-ry**2)*(+1.+rz)/2.+rx*
     /(+1.+rx)/2.*(+1.-ry**2)*rz*(+1.)/2.)*y(18)+(+rx*(+rx-
     /1.)/2.*ry*(+1.+ry)/2.*(+1.+rz)/2.+rx*(+rx-1.)/2.*ry*
     /(+1.+ry)/2.*rz*(+1.)/2.)*y(8)+(+(+1.-rx**2)*ry*(+1.+
     /ry)/2.*(+1.+rz)/2.+(+1.-rx**2)*ry*(+1.+ry)/2.*rz*(+
     /1.)/2.)*y(19)+(+rx*(+1.+rx)/2.*ry*(+1.+ry)/2.*(+1.+rz)/
     /2.+rx*(+1.+rx)/2.*ry*(+1.+ry)/2.*rz*(+1.)/2.)*y(7)
      rc(3,3)=+(+rx*(+rx-1.)/2.*ry*(+ry-1.)/2.*(+rz-1.)/
     /2.+rx*(+rx-1.)/2.*ry*(+ry-1.)/2.*rz*(+1.)/2.)*z(1)+(+
     /(+1.-rx**2)*ry*(+ry-1.)/2.*(+rz-1.)/2.+(+1.-rx**2)*
     /ry*(+ry-1.)/2.*rz*(+1.)/2.)*z(9)+(+rx*(+1.+rx)/2.*ry*
     /(+ry-1.)/2.*(+rz-1.)/2.+rx*(+1.+rx)/2.*ry*(+ry-1.)/
     /2.*rz*(+1.)/2.)*z(2)+(+rx*(+rx-1.)/2.*(+1.-ry**2)*(+
     /rz-1.)/2.+rx*(+rx-1.)/2.*(+1.-ry**2)*rz*(+1.)/2.)*z(12)
     /+(+(+1.-rx**2)*(+1.-ry**2)*(+rz-1.)/2.+(+1.-rx**2)*
     /(+1.-ry**2)*rz*(+1.)/2.)*z(21)+(+rx*(+1.+rx)/2.*(+1.-
     /ry**2)*(+rz-1.)/2.+rx*(+1.+rx)/2.*(+1.-ry**2)*rz*(+
     /1.)/2.)*z(10)+(+rx*(+rx-1.)/2.*ry*(+1.+ry)/2.*(+rz-1.)/
     /2.+rx*(+rx-1.)/2.*ry*(+1.+ry)/2.*rz*(+1.)/2.)*z(4)+(+
     /(+1.-rx**2)*ry*(+1.+ry)/2.*(+rz-1.)/2.+(+1.-rx**2)*
     /ry*(+1.+ry)/2.*rz*(+1.)/2.)*z(11)+(+rx*(+1.+rx)/2.*ry*
     /(+1.+ry)/2.*(+rz-1.)/2.+rx*(+1.+rx)/2.*ry*(+1.+ry)/
     /2.*rz*(+1.)/2.)*z(3)+(+rx*(+rx-1.)/2.*ry*(+ry-1.)/2.*
     /(-2.*rz))*z(13)+(+(+1.-rx**2)*ry*(+ry-1.)/2.*(-2.*rz))*z(22)
     /+(+rx*(+1.+rx)/2.*ry*(+ry-1.)/2.*(-2.*rz))*z(14)+(+rx*
     /(+rx-1.)/2.*(+1.-ry**2)*(-2.*rz))*z(25)+(+(+1.-rx**2)*
     /(+1.-ry**2)*(-2.*rz))*z(27)+(+rx*(+1.+rx)/2.*(+1.-ry**
     /2)*(-2.*rz))*z(23)+(+rx*(+rx-1.)/2.*ry*(+1.+ry)/2.*(-
     /2.*rz))*z(16)+(+(+1.-rx**2)*ry*(+1.+ry)/2.*(-2.*rz))*z(24)
     /+(+rx*(+1.+rx)/2.*ry*(+1.+ry)/2.*(-2.*rz))*z(15)+(+rx*
     /(+rx-1.)/2.*ry*(+ry-1.)/2.*(+1.+rz)/2.+rx*(+rx-1.)/
     /2.*ry*(+ry-1.)/2.*rz*(+1.)/2.)*z(5)+(+(+1.-rx**2)*ry*
     /(+ry-1.)/2.*(+1.+rz)/2.+(+1.-rx**2)*ry*(+ry-1.)/2.*
     /rz*(+1.)/2.)*z(17)+(+rx*(+1.+rx)/2.*ry*(+ry-1.)/2.*(+
     /1.+rz)/2.+rx*(+1.+rx)/2.*ry*(+ry-1.)/2.*rz*(+1.)/2.)*z(6)
     /+(+rx*(+rx-1.)/2.*(+1.-ry**2)*(+1.+rz)/2.+rx*(+rx-1.)/
     /2.*(+1.-ry**2)*rz*(+1.)/2.)*z(20)+(+(+1.-rx**2)*(+1.-
     /ry**2)*(+1.+rz)/2.+(+1.-rx**2)*(+1.-ry**2)*rz*(+1.)/
     /2.)*z(26)+(+rx*(+1.+rx)/2.*(+1.-ry**2)*(+1.+rz)/2.+rx*
     /(+1.+rx)/2.*(+1.-ry**2)*rz*(+1.)/2.)*z(18)+(+rx*(+rx-
     /1.)/2.*ry*(+1.+ry)/2.*(+1.+rz)/2.+rx*(+rx-1.)/2.*ry*
     /(+1.+ry)/2.*rz*(+1.)/2.)*z(8)+(+(+1.-rx**2)*ry*(+1.+
     /ry)/2.*(+1.+rz)/2.+(+1.-rx**2)*ry*(+1.+ry)/2.*rz*(+
     /1.)/2.)*z(19)+(+rx*(+1.+rx)/2.*ry*(+1.+ry)/2.*(+1.+rz)/
     /2.+rx*(+1.+rx)/2.*ry*(+1.+ry)/2.*rz*(+1.)/2.)*z(7)
      return
      end

      subroutine tq9(refc,coor,coorr,rc)
      implicit real*8 (a-h,o-z)
      dimension x(9),y(9),refc(2),coor(2),coorr(2,9),rc(2,2)
      rx=refc(1)
      ry=refc(2)
      do 1 n=1,9
      x(n)=coorr(1,n)
      y(n)=coorr(2,n)
1     continue
      coor(1)=+(+rx*(+rx-1.)/2.*ry*(+ry-1.)/2.)*x(1)+(+(+
     /1.-rx**2)*ry*(+ry-1.)/2.)*x(5)+(+rx*(+1.+rx)/2.*ry*(+
     /ry-1.)/2.)*x(2)+(+rx*(+rx-1.)/2.*(+1.-ry**2))*x(8)+(+
     /(+1.-rx**2)*(+1.-ry**2))*x(9)+(+rx*(+1.+rx)/2.*(+1.-
     /ry**2))*x(6)+(+rx*(+rx-1.)/2.*ry*(+1.+ry)/2.)*x(4)+(+
     /(+1.-rx**2)*ry*(+1.+ry)/2.)*x(7)+(+rx*(+1.+rx)/2.*ry*
     /(+1.+ry)/2.)*x(3)
      coor(2)=+(+rx*(+rx-1.)/2.*ry*(+ry-1.)/2.)*y(1)+(+(+
     /1.-rx**2)*ry*(+ry-1.)/2.)*y(5)+(+rx*(+1.+rx)/2.*ry*(+
     /ry-1.)/2.)*y(2)+(+rx*(+rx-1.)/2.*(+1.-ry**2))*y(8)+(+
     /(+1.-rx**2)*(+1.-ry**2))*y(9)+(+rx*(+1.+rx)/2.*(+1.-
     /ry**2))*y(6)+(+rx*(+rx-1.)/2.*ry*(+1.+ry)/2.)*y(4)+(+
     /(+1.-rx**2)*ry*(+1.+ry)/2.)*y(7)+(+rx*(+1.+rx)/2.*ry*
     /(+1.+ry)/2.)*y(3)
      rc(1,1)=+(+(+rx-1.)/2.*ry*(+ry-1.)/2.+rx*(+1.)/2.*
     /ry*(+ry-1.)/2.)*x(1)+(+(-2.*rx)*ry*(+ry-1.)/2.)*x(5)+(+
     /(+1.+rx)/2.*ry*(+ry-1.)/2.+rx*(+1.)/2.*ry*(+ry-1.)/
     /2.)*x(2)+(+(+rx-1.)/2.*(+1.-ry**2)+rx*(+1.)/2.*(+1.-
     /ry**2))*x(8)+(+(-2.*rx)*(+1.-ry**2))*x(9)+(+(+1.+rx)/
     /2.*(+1.-ry**2)+rx*(+1.)/2.*(+1.-ry**2))*x(6)+(+(+rx-
     /1.)/2.*ry*(+1.+ry)/2.+rx*(+1.)/2.*ry*(+1.+ry)/2.)*x(4)
     /+(+(-2.*rx)*ry*(+1.+ry)/2.)*x(7)+(+(+1.+rx)/2.*ry*(+
     /1.+ry)/2.+rx*(+1.)/2.*ry*(+1.+ry)/2.)*x(3)
      rc(2,1)=+(+(+rx-1.)/2.*ry*(+ry-1.)/2.+rx*(+1.)/2.*
     /ry*(+ry-1.)/2.)*y(1)+(+(-2.*rx)*ry*(+ry-1.)/2.)*y(5)+(+
     /(+1.+rx)/2.*ry*(+ry-1.)/2.+rx*(+1.)/2.*ry*(+ry-1.)/
     /2.)*y(2)+(+(+rx-1.)/2.*(+1.-ry**2)+rx*(+1.)/2.*(+1.-
     /ry**2))*y(8)+(+(-2.*rx)*(+1.-ry**2))*y(9)+(+(+1.+rx)/
     /2.*(+1.-ry**2)+rx*(+1.)/2.*(+1.-ry**2))*y(6)+(+(+rx-
     /1.)/2.*ry*(+1.+ry)/2.+rx*(+1.)/2.*ry*(+1.+ry)/2.)*y(4)
     /+(+(-2.*rx)*ry*(+1.+ry)/2.)*y(7)+(+(+1.+rx)/2.*ry*(+
     /1.+ry)/2.+rx*(+1.)/2.*ry*(+1.+ry)/2.)*y(3)
      rc(1,2)=+(+rx*(+rx-1.)/2.*(+ry-1.)/2.+rx*(+rx-1.)/
     /2.*ry*(+1.)/2.)*x(1)+(+(+1.-rx**2)*(+ry-1.)/2.+(+1.-
     /rx**2)*ry*(+1.)/2.)*x(5)+(+rx*(+1.+rx)/2.*(+ry-1.)/2.+
     /rx*(+1.+rx)/2.*ry*(+1.)/2.)*x(2)+(+rx*(+rx-1.)/2.*(-
     /2.*ry))*x(8)+(+(+1.-rx**2)*(-2.*ry))*x(9)+(+rx*(+1.+rx)/
     /2.*(-2.*ry))*x(6)+(+rx*(+rx-1.)/2.*(+1.+ry)/2.+rx*(+
     /rx-1.)/2.*ry*(+1.)/2.)*x(4)+(+(+1.-rx**2)*(+1.+ry)/2.+
     /(+1.-rx**2)*ry*(+1.)/2.)*x(7)+(+rx*(+1.+rx)/2.*(+1.+
     /ry)/2.+rx*(+1.+rx)/2.*ry*(+1.)/2.)*x(3)
      rc(2,2)=+(+rx*(+rx-1.)/2.*(+ry-1.)/2.+rx*(+rx-1.)/
     /2.*ry*(+1.)/2.)*y(1)+(+(+1.-rx**2)*(+ry-1.)/2.+(+1.-
     /rx**2)*ry*(+1.)/2.)*y(5)+(+rx*(+1.+rx)/2.*(+ry-1.)/2.+
     /rx*(+1.+rx)/2.*ry*(+1.)/2.)*y(2)+(+rx*(+rx-1.)/2.*(-
     /2.*ry))*y(8)+(+(+1.-rx**2)*(-2.*ry))*y(9)+(+rx*(+1.+rx)/
     /2.*(-2.*ry))*y(6)+(+rx*(+rx-1.)/2.*(+1.+ry)/2.+rx*(+
     /rx-1.)/2.*ry*(+1.)/2.)*y(4)+(+(+1.-rx**2)*(+1.+ry)/2.+
     /(+1.-rx**2)*ry*(+1.)/2.)*y(7)+(+rx*(+1.+rx)/2.*(+1.+
     /ry)/2.+rx*(+1.+rx)/2.*ry*(+1.)/2.)*y(3)
      return
      end

      subroutine tt6(refc,coor,coorr,rc)
      implicit real*8 (a-h,o-z)
      dimension x(6),y(6),refc(2),coor(2),coorr(2,6),rc(2,2)
      rx=refc(1)
      ry=refc(2)
      do 1 n=1,6
      x(n)=coorr(1,n)
      y(n)=coorr(2,n)
1     continue
      coor(1)=+(+rx*(+2.*rx-1.))*x(1)+(+rx*ry*4.)*x(4)+(+
     /ry*(+2.*ry-1.))*x(2)+(+ry*(+1.-rx-ry)*4.)*x(5)+(+(+1.-
     /2.*rx-2.*ry)*(+1.-rx-ry))*x(3)+(+rx*(+1.-rx-ry)*4.)*x(6)
      coor(2)=+(+rx*(+2.*rx-1.))*y(1)+(+rx*ry*4.)*y(4)+(+
     /ry*(+2.*ry-1.))*y(2)+(+ry*(+1.-rx-ry)*4.)*y(5)+(+(+1.-
     /2.*rx-2.*ry)*(+1.-rx-ry))*y(3)+(+rx*(+1.-rx-ry)*4.)*y(6)
      rc(1,1)=+(+(+2.*rx-1.)+rx*(+2.))*x(1)+(+ry*4.)*x(4)
     /+(+ry*(-1.)*4.)*x(5)+(+(-2.)*(+1.-rx-ry)+(+1.-2.*rx-
     /2.*ry)*(-1.))*x(3)+(+(+1.-rx-ry)*4.+rx*(-1.)*4.)*x(6)
      rc(2,1)=+(+(+2.*rx-1.)+rx*(+2.))*y(1)+(+ry*4.)*y(4)
     /+(+ry*(-1.)*4.)*y(5)+(+(-2.)*(+1.-rx-ry)+(+1.-2.*rx-
     /2.*ry)*(-1.))*y(3)+(+(+1.-rx-ry)*4.+rx*(-1.)*4.)*y(6)
      rc(1,2)=+(+rx*4.)*x(4)+(+(+2.*ry-1.)+ry*(+2.))*x(2)
     /+(+(+1.-rx-ry)*4.+ry*(-1.)*4.)*x(5)+(+(-2.)*(+1.-rx-
     /ry)+(+1.-2.*rx-2.*ry)*(-1.))*x(3)+(+rx*(-1.)*4.)*x(6)
      rc(2,2)=+(+rx*4.)*y(4)+(+(+2.*ry-1.)+ry*(+2.))*y(2)
     /+(+(+1.-rx-ry)*4.+ry*(-1.)*4.)*y(5)+(+(-2.)*(+1.-rx-
     /ry)+(+1.-2.*rx-2.*ry)*(-1.))*y(3)+(+rx*(-1.)*4.)*y(6)
      return
      end

      subroutine tl2(refc,coor,coorr,rc)
      implicit real*8 (a-h,o-z)
      dimension x(2),refc(1),coor(1),coorr(1,2),rc(1,1)
      rx=refc(1)
      do 1 n=1,2
      x(n)=coorr(1,n)
1     continue
      coor(1)=+(+(+1.-rx)/2.)*x(1)+(+(+1.+rx)/2.)*x(2)
      rc(1,1)=+(+(-1.)/2.)*x(1)+(+(+1.)/2.)*x(2)
      return
      end

      subroutine tl3(refc,coor,coorr,rc)
      implicit real*8 (a-h,o-z)
      dimension x(2),refc(1),coor(1),coorr(1,2),rc(1,1)
      rx=refc(1)
      do 1 n=1,2
      x(n)=coorr(1,n)
1     continue
      coor(1)=+(+(+1.-rx)/2.)*x(1)+(+(+1.+rx)/2.)*x(2)
      rc(1,1)=+(+(-1.)/2.)*x(1)+(+(+1.)/2.)*x(2)
      end
c ...................................................................

      subroutine fqtcw(iqtcw,refc,d)
      implicit real*8 (a-h,o-z)
      dimension refc(*),d(*)
      goto (1,2,3,4,5,6,7,8,9,10,11), iqtcw
1     call fq4(refc,d)
      goto 1111
2     call ft3(refc,d)
      goto 1111
3     call fc8(refc,d)
      goto 1111
4     call fw4(refc,d)
      goto 1111
5     call fw6(refc,d)
      goto 1111
6     call fq9(refc,d)
      goto 1111
7     call ft6(refc,d)
      goto 1111
8     call fc27(refc,d)
      goto 1111
9     call fw10(refc,d)
      goto 1111
10    call fl2(refc,d)
      goto 1111
11    call fl3(refc,d)
1111  continue
      return
      end

      subroutine fq4(refc,d)
      implicit real*8 (a-h,o-z)
      dimension refc(2),d(4)
      rx=refc(1)
      ry=refc(2)
1     d(1)=+(+1.-rx)/2.*(+1.-ry)/2. 
2     d(2)=+(+1.+rx)/2.*(+1.-ry)/2. 
3     d(3)=+(+1.+rx)/2.*(+1.+ry)/2. 
4     d(4)=+(+1.-rx)/2.*(+1.+ry)/2. 
      return
      end

      subroutine ft3(refc,d)
      implicit real*8 (a-h,o-z)
      dimension refc(2),d(3)
      rx=refc(1)
      ry=refc(2)
1     d(1)=+rx 
2     d(2)=+ry 
3     d(3)=+(+1.-rx-ry) 
      return
      end

      subroutine fc8(refc,d)
      implicit real*8 (a-h,o-z)
      dimension refc(3),d(8)
      rx=refc(1)
      ry=refc(2)
      rz=refc(3)
1     d(1)=+(+1.-rx)/2.*(+1.-ry)/2.*(+1.-rz)/2. 
2     d(2)=+(+1.+rx)/2.*(+1.-ry)/2.*(+1.-rz)/2. 
3     d(3)=+(+1.+rx)/2.*(+1.+ry)/2.*(+1.-rz)/2. 
4     d(4)=+(+1.-rx)/2.*(+1.+ry)/2.*(+1.-rz)/2. 
5     d(5)=+(+1.-rx)/2.*(+1.-ry)/2.*(+1.+rz)/2. 
6     d(6)=+(+1.+rx)/2.*(+1.-ry)/2.*(+1.+rz)/2. 
7     d(7)=+(+1.+rx)/2.*(+1.+ry)/2.*(+1.+rz)/2. 
8     d(8)=+(+1.-rx)/2.*(+1.+ry)/2.*(+1.+rz)/2. 
      return
      end

      subroutine fw4(refc,d)
      implicit real*8 (a-h,o-z)
      dimension refc(3),d(4)
      rx=refc(1)
      ry=refc(2)
      rz=refc(3)
      goto (1,2,3,4) n
1     d(1)=+rx 
2     d(2)=+ry 
3     d(3)=+rz 
4     d(4)=+(+1.-rx-ry-rz) 
      return
      end

      subroutine fw6(refc,d)
      implicit real*8 (a-h,o-z)
      dimension refc(3),d(6)
      rx=refc(1)
      ry=refc(2)
      rz=refc(3)
1     d(1)=+rx*(+1.-rz)/2. 
2     d(2)=+ry*(+1.-rz)/2. 
3     d(3)=+(+1.-rx-ry)*(+1.-rz)/2. 
4     d(4)=+rx*(+1.+rz)/2. 
5     d(5)=+ry*(+1.+rz)/2. 
6     d(6)=+(+1.-rx-ry)*(+1.+rz)/2. 
      return
      end

      subroutine ft6(refc,d)
      implicit real*8 (a-h,o-z)
      dimension refc(2),d(6)
      rx=refc(1)
      ry=refc(2)
1     d(1)=+rx*(+2.*rx-1.) 
2     d(4)=+rx*ry*4. 
3     d(2)=+ry*(+2.*ry-1.) 
4     d(5)=+ry*(+1.-rx-ry)*4. 
5     d(3)=+(+1.-2.*rx-2.*ry)*(+1.-rx-ry) 
6     d(6)=+rx*(+1.-rx-ry)*4. 
      return
      end

      subroutine fw10(refc,d)
      implicit real*8 (a-h,o-z)
      dimension refc(3),d(10)
      rx=refc(1)
      ry=refc(2)
      rz=refc(3)
1     d(1)=+rx*(+2.*rx-1.) 
2     d(5)=+rx*ry*4. 
3     d(2)=+ry*(+2.*ry-1.) 
4     d(6)=+ry*rz*4. 
5     d(3)=+rz*(+2.*rz-1.) 
6     d(7)=+rx*rz*4. 
7     d(8)=+rx*(+1.-rx-ry-rz)*4. 
8     d(9)=+ry*(+1.-rx-ry-rz)*4. 
9     d(10)=+rz*(+1.-rx-ry-rz)*4. 
10    d(4)=+(+1.-2.*rx-2.*ry-2.*rz)*(+1.-rx-ry-rz) 
      return
      end

      subroutine fq9(refc,d)
      implicit real*8 (a-h,o-z)
      dimension refc(2),d(9)
      rx=refc(1)
      ry=refc(2)
1     d(1)=+rx*(+rx-1.)/2.*ry*(+ry-1.)/2. 
2     d(5)=+(+1.-rx**2)*ry*(+ry-1.)/2. 
3     d(2)=+rx*(+1.+rx)/2.*ry*(+ry-1.)/2. 
4     d(8)=+rx*(+rx-1.)/2.*(+1.-ry**2) 
5     d(9)=+(+1.-rx**2)*(+1.-ry**2) 
6     d(6)=+rx*(+1.+rx)/2.*(+1.-ry**2) 
7     d(4)=+rx*(+rx-1.)/2.*ry*(+1.+ry)/2. 
8     d(7)=+(+1.-rx**2)*ry*(+1.+ry)/2. 
9     d(3)=+rx*(+1.+rx)/2.*ry*(+1.+ry)/2. 
      return
      end

      subroutine fc27(refc,d)
      implicit real*8 (a-h,o-z)
      dimension refc(3),d(27)
      rx=refc(1)
      ry=refc(2)
      rz=refc(3)
1     d(1)=+rx*(+rx-1.)/2.*ry*(+ry-1.)/2.*rz*(+rz-1.)/2. 
2     d(9)=+(+1.-rx**2)*ry*(+ry-1.)/2.*rz*(+rz-1.)/2. 
3     d(2)=+rx*(+1.+rx)/2.*ry*(+ry-1.)/2.*rz*(+rz-1.)/2. 
4     d(12)=+rx*(+rx-1.)/2.*(+1.-ry**2)*rz*(+rz-1.)/2. 
5     d(21)=+(+1.-rx**2)*(+1.-ry**2)*rz*(+rz-1.)/2. 
6     d(10)=+rx*(+1.+rx)/2.*(+1.-ry**2)*rz*(+rz-1.)/2. 
7     d(4)=+rx*(+rx-1.)/2.*ry*(+1.+ry)/2.*rz*(+rz-1.)/2. 
8     d(11)=+(+1.-rx**2)*ry*(+1.+ry)/2.*rz*(+rz-1.)/2. 
9     d(3)=+rx*(+1.+rx)/2.*ry*(+1.+ry)/2.*rz*(+rz-1.)/2. 
10    d(13)=+rx*(+rx-1.)/2.*ry*(+ry-1.)/2.*(+1.-rz**2) 
11    d(22)=+(+1.-rx**2)*ry*(+ry-1.)/2.*(+1.-rz**2) 
12    d(14)=+rx*(+1.+rx)/2.*ry*(+ry-1.)/2.*(+1.-rz**2) 
13    d(25)=+rx*(+rx-1.)/2.*(+1.-ry**2)*(+1.-rz**2) 
14    d(27)=+(+1.-rx**2)*(+1.-ry**2)*(+1.-rz**2) 
15    d(23)=+rx*(+1.+rx)/2.*(+1.-ry**2)*(+1.-rz**2) 
16    d(16)=+rx*(+rx-1.)/2.*ry*(+1.+ry)/2.*(+1.-rz**2) 
17    d(24)=+(+1.-rx**2)*ry*(+1.+ry)/2.*(+1.-rz**2) 
18    d(15)=+rx*(+1.+rx)/2.*ry*(+1.+ry)/2.*(+1.-rz**2) 
19    d(5)=+rx*(+rx-1.)/2.*ry*(+ry-1.)/2.*rz*(+1.+rz)/2. 
20    d(17)=+(+1.-rx**2)*ry*(+ry-1.)/2.*rz*(+1.+rz)/2. 
21    d(6)=+rx*(+1.+rx)/2.*ry*(+ry-1.)/2.*rz*(+1.+rz)/2. 
22    d(20)=+rx*(+rx-1.)/2.*(+1.-ry**2)*rz*(+1.+rz)/2. 
23    d(26)=+(+1.-rx**2)*(+1.-ry**2)*rz*(+1.+rz)/2. 
24    d(18)=+rx*(+1.+rx)/2.*(+1.-ry**2)*rz*(+1.+rz)/2. 
25    d(8)=+rx*(+rx-1.)/2.*ry*(+1.+ry)/2.*rz*(+1.+rz)/2. 
26    d(19)=+(+1.-rx**2)*ry*(+1.+ry)/2.*rz*(+1.+rz)/2. 
27    d(7)=+rx*(+1.+rx)/2.*ry*(+1.+ry)/2.*rz*(+1.+rz)/2. 
      return
      end

      subroutine fl3(refc,d)
      implicit real*8 (a-h,o-z)
      dimension refc(1),d(3)
      rx=refc(1)
1     d(1)=+rx*(+rx-1.)/2. 
2     d(2)=+(+1.-rx**2) 
3     d(3)=+rx*(+1.+rx)/2. 
      return
      end

      subroutine fl2(refc,d)
      implicit real*8 (a-h,o-z)
      dimension refc(1),d(2)
      rx=refc(1)
1     d(1)=+(+1.-rx)/2. 
2     d(2)=+(+1.+rx)/2. 
      return
      end
